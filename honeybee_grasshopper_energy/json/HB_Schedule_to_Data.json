{
  "version": "0.1.2", 
  "nickname": "SchToData", 
  "outputs": [
    [
      {
        "access": "None", 
        "name": "data", 
        "description": "A ladybug DataCollection representing the timeseries values of the schedule.\nThis can be used to visualize timeseries schedule values over the entire\nperiod of a simulation using a component like the \"LB Hourly Plot\".", 
        "type": null, 
        "default": null
      }
    ]
  ], 
  "inputs": [
    {
      "access": "item", 
      "name": "_schedule", 
      "description": "A ScheduleRuleSet or SchedileFixedInterval for which a DataCollection\nof timeseries schedule values will be produced. This can also be the\nidentifier of a Schedule to be looked up in the schedule library.", 
      "type": "System.Object", 
      "default": null
    }, 
    {
      "access": "item", 
      "name": "analysis_period_", 
      "description": "An optional AnalysisPeriod to set the start and end datetimes\nof the resulting DataCollection. The timestep of this AnalysisPeriod\nwill also be used to determine the timestep of the resulting DataCollection.", 
      "type": "System.Object", 
      "default": null
    }, 
    {
      "access": "item", 
      "name": "_week_start_day_", 
      "description": "An optional text string to set the start day of the week\nof the schedule timeseries data. Default: Sunday. Choose from the following:\n* Sunday\n* Monday\n* Tuesday\n* Wednesday\n* Thursday\n* Friday\n* Saturday", 
      "type": "string", 
      "default": null
    }, 
    {
      "access": "list", 
      "name": "holidays_", 
      "description": "An optional list of strings (eq: 25 Dec) to represent the holidays\nin the resulting timeseries. Holiday schedules will be used for these\ndates in the resulting timeseries.", 
      "type": "string", 
      "default": null
    }
  ], 
  "subcategory": "2 :: Schedules", 
  "code": "\n\ntry:  # import the honeybee-energy dependencies\n    from honeybee_energy.schedule.ruleset import ScheduleRuleset\n    from honeybee_energy.lib.schedules import schedule_by_identifier\nexcept ImportError as e:\n    raise ImportError('\\nFailed to import honeybee_energy:\\n\\t{}'.format(e))\n\ntry:  # import the ladybug dependencies\n    from ladybug.dt import Date, DateTime\nexcept ImportError as e:\n    raise ImportError('\\nFailed to import ladybug:\\n\\t{}'.format(e))\n\ntry:  # import ladybug_{{cad}} dependencies\n    from ladybug_{{cad}}.{{plugin}} import all_required_inputs\nexcept ImportError as e:\n    raise ImportError('\\nFailed to import ladybug_{{cad}}:\\n\\t{}'.format(e))\n\n\nif all_required_inputs(ghenv.Component):\n    # get the schedue from the library if it's a string\n    if isinstance(_schedule, str):\n        _schedule = schedule_by_identifier(_schedule)\n\n    # process the _week_start_day_\n    week_start_day = 'Sunday' if _week_start_day_ is None else _week_start_day_.title()\n\n    # process the analysis period if it is input\n    if analysis_period_ is not None:\n        start_date = analysis_period_.st_time.date\n        end_date = analysis_period_.end_time.date\n        timestep = analysis_period_.timestep\n    else:\n        start_date, end_date, timestep = Date(1, 1), Date(12, 31), 1\n\n    # process the holidays_ if they are input\n    holidays = None\n    if len(holidays_) != 0 and holidays_[0] is not None:\n        try:\n            holidays = tuple(Date.from_date_string(hol) for hol in holidays_)\n        except ValueError:\n            holidays = tuple(DateTime.from_date_time_string(hol).date for hol in holidays_)\n\n    # create the DataCollection\n    if isinstance(_schedule, ScheduleRuleset):\n        data = _schedule.data_collection(\n            timestep, start_date, end_date, week_start_day, holidays, leap_year=False)\n    else:  # assume that it is a ScheduleFixedInterval\n        data = _schedule.data_collection_at_timestep(timestep, start_date, end_date)\n\n    # if there are hour inputs on the analysis_period_, apply it to the data\n    if analysis_period_ is not None and \\\n            (analysis_period_.st_hour != 0 or analysis_period_.end_hour != 23):\n        data = data.filter_by_analysis_period(analysis_period_)\n", 
  "category": "HB-Energy", 
  "name": "HB Schedule to Data", 
  "description": "Get a ladybug DataCollection representing this schedule at a given timestep.\n_\nThis DataCollection can be used to visualize timeseries schedule values over\nthe entire period of a simulation using a component like the \"LB Hourly Plot\".\n_\nThis DataCollection can also be used in the crafting of conditional statements\nwith the ladybug components. For example, making a psychrometric chart of zone\ntemperature/humidity for only the hours that the occupancy schedule is above a\ncertain threshold.\n-"
}
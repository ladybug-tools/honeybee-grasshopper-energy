{
  "version": "0.5.11", 
  "nickname": "ModelToIDF", 
  "outputs": [
    [
      {
        "access": "None", 
        "name": "idf", 
        "description": "The file path of the IDF file that has been generated on your machine.", 
        "type": null, 
        "default": null
      }, 
      {
        "access": "None", 
        "name": "sql", 
        "description": "The file path of the SQL result file that has been generated on your\nmachine. This will be None unless run_ is set to True.", 
        "type": null, 
        "default": null
      }, 
      {
        "access": "None", 
        "name": "zsz", 
        "description": "Path to a .csv file containing detailed zone load information recorded\nover the course of the design days. This will be None unless run_ is\nset to True.", 
        "type": null, 
        "default": null
      }, 
      {
        "access": "None", 
        "name": "rdd", 
        "description": "The file path of the Result Data Dictionary (.rdd) file that is\ngenerated after running the file through EnergyPlus.  This file\ncontains all possible outputs that can be requested from the EnergyPlus\nmodel.  Use the Read Result Dictionary component to see what outputs\ncan be requested.", 
        "type": null, 
        "default": null
      }, 
      {
        "access": "None", 
        "name": "html", 
        "description": "The HTML file path of the Summary Reports. Note that this will be None\nunless the input _sim_par_ denotes that an HTML report is requested and\nrun_ is set to True.", 
        "type": null, 
        "default": null
      }
    ]
  ], 
  "inputs": [
    {
      "access": "item", 
      "name": "_model", 
      "description": "A honeybee model object possessing all geometry and corresponding\nenergy simulation properties.", 
      "type": "System.Object", 
      "default": null
    }, 
    {
      "access": "item", 
      "name": "_epw_file", 
      "description": "Path to an .epw file on your system as a text string.", 
      "type": "System.Object", 
      "default": null
    }, 
    {
      "access": "item", 
      "name": "_sim_par_", 
      "description": "A honeybee Energy SimulationParameter object that describes all\nof the setting for the simulation. If None, some default simulation\nparameters will automatically be used.", 
      "type": "System.Object", 
      "default": null
    }, 
    {
      "access": "list", 
      "name": "add_str_", 
      "description": "THIS OPTION IS JUST FOR ADVANCED USERS OF ENERGYPLUS.\nYou can input additional text strings here that you would like\nwritten into the IDF.  The strings input here should be complete\nEnergyPlus objects that are correctly formatted. This input can be used to\nwrite objects into the IDF that are not currently supported by Honeybee.", 
      "type": "string", 
      "default": null
    }, 
    {
      "access": "item", 
      "name": "_folder_", 
      "description": "An optional folder on your system, into which your IDF and result\nfiles will be written.  NOTE THAT DIRECTORIES INPUT HERE SHOULD NOT HAVE\nANY SPACES OR UNDERSCORES IN THE FILE PATH.", 
      "type": "string", 
      "default": null
    }, 
    {
      "access": "item", 
      "name": "_write", 
      "description": "Set to \"True\" to translate the model to an IDF file.\nThe file path of the resulting file will appear in the idf output of\nthis component.  Note that only setting this to \"True\" and not setting\nrun_ to \"True\" will not automatically run the IDF through EnergyPlus.", 
      "type": "bool", 
      "default": null
    }, 
    {
      "access": "item", 
      "name": "run_", 
      "description": "Set to \"True\" to run your IDF through EnergyPlus once it is written.\nThis will ensure that result files appear in their respective outputs.", 
      "type": "bool", 
      "default": null
    }
  ], 
  "subcategory": "5 :: Simulate", 
  "code": "\nimport os\n\ntry:\n    from ladybug.futil import write_to_file_by_name, nukedir\nexcept ImportError as e:\n    raise ImportError('\\nFailed to import ladybug:\\n\\t{}'.format(e))\n\ntry:\n    from honeybee.config import folders\nexcept ImportError as e:\n    raise ImportError('\\nFailed to import honeybee:\\n\\t{}'.format(e))\n\ntry:\n    from honeybee_energy.simulation.parameter import SimulationParameter\n    from honeybee_energy.run import run_idf\n    from honeybee_energy.result.err import Err\n    from honeybee_energy.writer import energyplus_idf_version\n    from honeybee_energy.config import folders as energy_folders\nexcept ImportError as e:\n    raise ImportError('\\nFailed to import honeybee_energy:\\n\\t{}'.format(e))\n\ntry:\n    from ladybug_{{cad}}.{{plugin}} import all_required_inputs, give_warning\nexcept ImportError as e:\n    raise ImportError('\\nFailed to import ladybug_{{cad}}:\\n\\t{}'.format(e))\n\n# check the presence of openstudio and check that the version is compatible\ncompatibe_ep_version = (9, 3, 0)\nhb_url = 'https://github.com/ladybug-tools/lbt-{{plugin}}/wiki/1.4-Compatibility-Matrix'\nin_msg = 'Get a compatible version of EnergyPlus by downloading and installing\\nthe ' \\\n    'version of OpenStudio listed in the Ladybug Tools compatibility matrix\\n{}.'.format(hb_url)\nassert energy_folders.energyplus_path is not None, \\\n    'No EnergyPlus installation was found on this machine.\\n{}'.format(in_msg)\nep_version = energy_folders.energyplus_version\nassert ep_version is not None and ep_version >= compatibe_ep_version, \\\n    'The installed EnergyPlus is not version {} or greater.' \\\n    '\\n{}'.format('.'.join(str(v) for v in compatibe_ep_version), in_msg)\n\n\ndef orphaned_warning(object_type):\n    \"\"\"Generate an error message for orphaned Faces, Apertures, or Doors.\"\"\"\n    return 'Input _model contains orphaned {}s. These are not permitted in ' \\\n        'Models for energy simulation.\\nIf you have geometry that is not a ' \\\n        'part of a Room boundary that you want included in the energy simulation, ' \\\n        'it should be added as shades.'.format(object_type)\n\n\nif all_required_inputs(ghenv.Component) and _write:\n    # process the simulation folder name and the directory\n    _folder_ = folders.default_simulation_folder if _folder_ is None else _folder_\n    directory = os.path.join(_folder_, _model.identifier, 'EnergyPlus')\n    sch_directory = os.path.join(directory, 'schedules')\n\n    # delete any existing files in the directory\n    nukedir(directory)\n\n    # process the simulation parameters\n    if _sim_par_ is None:\n        _sim_par_ = SimulationParameter()\n        _sim_par_.output.add_zone_energy_use()\n    else:\n        _sim_par_ = _sim_par_.duplicate()  # ensure input is not edited\n\n    # assign design days from the EPW if there are not in the _sim_par_\n    if len(_sim_par_.sizing_parameter.design_days) == 0:\n        msg = None\n        folder, epw_file_name = os.path.split(_epw_file)\n        ddy_file = os.path.join(folder, epw_file_name.replace('.epw', '.ddy'))\n        if os.path.isfile(ddy_file):\n            try:\n                _sim_par_.sizing_parameter.add_from_ddy_996_004(ddy_file)\n            except AssertionError:\n                msg = 'No ddy_file_ was input into the _sim_par_ sizing ' \\\n                    'parameters\\n and no design days were found in the .ddy file '\\\n                    'next to the _epw_file.'\n        else:\n             msg = 'No ddy_file_ was input into the _sim_par_ sizing parameters\\n' \\\n                'and no .ddy file was found next to the _epw_file.'\n        if msg is not None:\n            epw_obj = EPW(_epw_file)\n            des_days = [epw_obj.approximate_design_day('WinterDesignDay'),\n                        epw_obj.approximate_design_day('SummerDesignDay')]\n            _sim_par_.sizing_parameter.design_days = des_days\n            msg = msg + '\\nDesign days were generated from the input _epw_file but this ' \\\n                '\\nis not as accurate as design days from DDYs distributed with the EPW.'\n            give_warning(ghenv.Component, msg)\n            print msg\n\n    # process the additional strings\n    add_str = '/n'.join(add_str_) if add_str_ is not None else ''\n\n    # check the model to be sure there are no orphaned faces, apertures, or doors\n    assert len(_model.orphaned_faces) == 0, orphaned_warning('Face')\n    assert len(_model.orphaned_apertures) == 0, orphaned_warning('Aperture')\n    assert len(_model.orphaned_doors) == 0, orphaned_warning('Door')\n\n    # create the strings for simulation paramters and model\n    ver_str = energyplus_idf_version() if energy_folders.energyplus_version \\\n        is not None else energyplus_idf_version((9, 3, 0))\n    sim_par_str = _sim_par_.to_idf()\n    model_str = _model.to.idf(_model, schedule_directory=sch_directory)\n    idf_str = '\\n\\n'.join([ver_str, sim_par_str, model_str, add_str])\n\n    # write the final string into an IDF.\n    idf = os.path.join(directory, 'in.idf')\n    write_to_file_by_name(directory, 'in.idf', idf_str, True)\n\n    if run_:\n        sql, zsz, rdd, html, err = run_idf(idf, _epw_file)\n        if err is not None:\n            err_obj = Err(err)\n            print(err_obj.file_contents)\n            for warn in err_obj.severe_errors:\n                give_warning(ghenv.Component, warn)\n            for error in err_obj.fatal_errors:\n                raise Exception(error)\n", 
  "category": "HB-Energy", 
  "name": "HB Model to IDF", 
  "description": "Write a honeybee Model to an IDF file and then run it through EnergyPlus.\n-"
}
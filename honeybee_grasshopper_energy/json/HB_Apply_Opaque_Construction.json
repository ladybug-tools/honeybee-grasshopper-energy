{
  "version": "1.0.0", 
  "nickname": "ApplyOpaqueConstr", 
  "outputs": [
    [
      {
        "access": "None", 
        "name": "hb_objs", 
        "description": "The input honeybee objects with their constructions edited.", 
        "type": null, 
        "default": null
      }
    ]
  ], 
  "inputs": [
    {
      "access": "list", 
      "name": "_hb_objs", 
      "description": "Honeybee Faces, Doors or Rooms to which the input _constr should\nbe assigned. For the case of a Honeybee Room, the construction\nwill only be applied to the Room's outdoor walls. Note that, if you\nneed to assign a construction to all the roofs, floors, etc. of a\nRoom, the best practice is to create a ConstructionSet and assing that\nto the Room.", 
      "type": "System.Object", 
      "default": null
    }, 
    {
      "access": "list", 
      "name": "_constr", 
      "description": "A Honeybee OpaqueConstruction to be applied to the input _hb_objs.\nThis can also be text for a construction to be looked up in the opaque\nconstruction library. If an array of text or construction objects\nare input here, different constructions will be assigned based on\ncardinal direction, starting with north and moving clockwise.", 
      "type": "System.Object", 
      "default": null
    }
  ], 
  "subcategory": "1 :: Constructions", 
  "code": "\n\ntry:  # import the honeybee-energy extension\n    from honeybee_energy.lib.constructions import opaque_construction_by_identifier\nexcept ImportError as e:\n    raise ImportError('\\nFailed to import honeybee_energy:\\n\\t{}'.format(e))\n\ntry:  # import the core honeybee dependencies\n    from honeybee.boundarycondition import Outdoors\n    from honeybee.facetype import Wall\n    from honeybee.room import Room\n    from honeybee.face import Face\n    from honeybee.door import Door\n    from honeybee.orientation import angles_from_num_orient, face_orient_index\nexcept ImportError as e:\n    raise ImportError('\\nFailed to import honeybee:\\n\\t{}'.format(e))\n\ntry:  # import the ladybug_{{cad}} dependencies\n    from ladybug_{{cad}}.{{plugin}} import all_required_inputs\nexcept ImportError as e:\n    raise ImportError('\\nFailed to import ladybug_{{cad}}:\\n\\t{}'.format(e))\n\n\ndef is_exterior_wall(face):\n    \"\"\"Check whether a given Face is an exterior Wall.\"\"\"\n    return isinstance(face.boundary_condition, Outdoors) and \\\n        isinstance(face.type, Wall)\n\n\nif all_required_inputs(ghenv.Component):\n    # duplicate the initial objects\n    hb_objs = [obj.duplicate() for obj in _hb_objs]\n    \n    # process the input constructions\n    for i, constr in enumerate(_constr):\n        if isinstance(constr, str):\n            _constr[i] = opaque_construction_by_identifier(constr)\n    \n    # error message for unrecognized object\n    error_msg = 'Input _hb_objs must be a Room, Face, or Door. Not {}.'\n    \n    # assign the constructions\n    if len(_constr) == 1:  # assign indiscriminately, even if it's horizontal\n        for obj in hb_objs:\n            if isinstance(obj, (Face, Door)):\n                obj.properties.energy.construction = _constr[0]\n            elif isinstance(obj, Room):\n                for face in obj.faces:\n                    if is_exterior_wall(face):\n                        face.properties.energy.construction = _constr[0]\n            else:\n                raise TypeError(error_msg.format(type(obj)))\n    else:  # assign constructions based on cardinal direction\n        angles = angles_from_num_orient(len(_constr))\n        for obj in hb_objs:\n            if isinstance(obj, (Face, Door)):\n                orient_i = face_orient_index(obj, angles)\n                if orient_i is not None:\n                    obj.properties.energy.construction = _constr[orient_i]\n            elif isinstance(obj, Room):\n                 for face in obj.faces:\n                     if is_exterior_wall(face):\n                         orient_i = face_orient_index(face, angles)\n                         if orient_i is not None:\n                            face.properties.energy.construction = _constr[orient_i]\n            else:\n                raise TypeError(error_msg.format(type(obj)))\n\n", 
  "category": "HB-Energy", 
  "name": "HB Apply Opaque Construction", 
  "description": "Apply OpaqueConstruction to Honeybee Faces, Doors or Room walls.\n_\nThis component supports the assigning of different constructions based on cardinal\norientation, provided that a list of OpaqueConstructions are input to the _constr. \n-"
}
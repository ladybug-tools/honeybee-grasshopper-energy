{
  "version": "1.7.0", 
  "nickname": "LoadShadeBenefit", 
  "outputs": [
    [
      {
        "access": "None", 
        "name": "vectors", 
        "description": "The sun vectors that were used to evaluate the shade (note that\nthese will increase as the _timestep_ increases).", 
        "type": null, 
        "default": null
      }, 
      {
        "access": "None", 
        "name": "points", 
        "description": "Points across the room Aperture geometry from which sun vectors\nare projected. Note that only Apertures with assigned Shades are\nevaluated in order to avoid unnessarily increasing the calculation\ntime by evaluating windows for which there is not shade.", 
        "type": null, 
        "default": null
      }, 
      {
        "access": "None", 
        "name": "mesh", 
        "description": "A colored mesh of the Shades assigned to the room's apertures showing\nwhere shading is helpful (blue), harmful (red), or does not make\nmuch of a difference (white or desaturated colors). Note that\nthe colors can change depending upon the input legend_par_.", 
        "type": null, 
        "default": null
      }, 
      {
        "access": "None", 
        "name": "legend", 
        "description": "Legend showing the numeric values of kWh per unit shade area of\ndecreased/increased cooling/heating load that correspond to the\ncolors in the shade mesh.", 
        "type": null, 
        "default": null
      }, 
      {
        "access": "None", 
        "name": "title", 
        "description": "A text object for the study title.", 
        "type": null, 
        "default": null
      }, 
      {
        "access": "None", 
        "name": "shade_help", 
        "description": "The cumulative kWh of avoided cooling load per square area unit\nobtained by shading the given cell. If a given square meter of\nshade geometry has a helpfulness of 10 kWh/m2, this means that\na shade in this location decreases the cooling load of the Room\nby roughly 10 kWh over the year.", 
        "type": null, 
        "default": null
      }, 
      {
        "access": "None", 
        "name": "shade_harm", 
        "description": "The cumulative kWh of increased heating load per square area unit\nobtained by shading the given cell. If a given square meter of\nshade geometry has a harmfulness of -10 kWh/m2, this means that\na shade in this location increases the heating load of the Room\nby roughly 10 kWh over the year.", 
        "type": null, 
        "default": null
      }, 
      {
        "access": "None", 
        "name": "shade_net", 
        "description": "The sum of the helpfulness and harmfulness for each cell. This will be\nnegative if shading the cell has a net harmful effect and positive\nif the shade has a net helpful effect.", 
        "type": null, 
        "default": null
      }
    ]
  ], 
  "inputs": [
    {
      "access": "list", 
      "name": "_rooms", 
      "description": "A list of Honeybee Rooms for which cooling/heating shade benefit/harm will\nbe evaluated. At least some of these Rooms should have Apertures\nwith Shades assigned to them in order for this component to produce\nmeaningful results. Note that all Shades generated with the \"HB Louver\nShades\" component or the \"HB Extruded Border\" component are\nautomatically assigned to a parent Aperture. For more complex\nShade geometries, the \"HB Add Shade\" component can be used to\nassign the Shade to a parent Aperture.", 
      "type": "System.Object", 
      "default": null
    }, 
    {
      "access": "list", 
      "name": "context_", 
      "description": "Honeybee Shades representing context geometry that can block sun\nto the _rooms, therefore discounting any benefit or harm that could\ncome to the Room's Shades.", 
      "type": "System.Object", 
      "default": null
    }, 
    {
      "access": "item", 
      "name": "_epw_file", 
      "description": "Path to an .epw file on your system as a text string. This will be\nused in the energy simulation to determine heating/cooling loads\nand to generate solar vectors for the shade benefit calculation.", 
      "type": "string", 
      "default": "0"
    }, 
    {
      "access": "item", 
      "name": "_north_", 
      "description": "A number between -360 and 360 for the counterclockwise difference\nbetween the North and the positive Y-axis in degrees.\n90 is West and 270 is East. (Default: 0).", 
      "type": "System.Object", 
      "default": null
    }, 
    {
      "access": "item", 
      "name": "_grid_size", 
      "description": "A positive number in Rhino model units for the size of grid cells at\nwhich the Shade geometries of the input _rooms will be subdivided\nfor shade benefit analysis. The smaller the grid size, the higher\nthe resolution of the analysis and the longer the calculation will\ntake. So it is recommended that one start with a large value here\nand decrease the value as needed. However, the grid size should\nusually be smaller than the dimensions of the smallest piece of\nShade geometry in order to yield meaningful results.", 
      "type": "double", 
      "default": null
    }, 
    {
      "access": "item", 
      "name": "_timestep_", 
      "description": "An integer for the number of timesteps per hour at which the energy\nsimulation will run and sun vectors will be generated for the analysis.\nHigher values will result in the generation of more vectors, which\nwill make the resulting shade meshes smoother and produce a better\nrepresentation of real benefit/harm. However, the calculation will take\nlonger as there are more intersection operations to perform. The\ndefault is 1 timestep per hour, which is the coarsest resolution\navalable and the fastest calculation.", 
      "type": "int", 
      "default": null
    }, 
    {
      "access": "item", 
      "name": "legend_par_", 
      "description": "Optional legend parameters from the \"LB Legend Parameters\"\nthat will be used to customize the display of the results.", 
      "type": "System.Object", 
      "default": null
    }, 
    {
      "access": "item", 
      "name": "lag_time_", 
      "description": "A number for the amount of time in hours between when solar gain\neneters the room and the gain results in an increased cooling load.\nTypically, it takes an hour or so for solar gains falling on the\nroom floors to heat up the floor surface and then convect to the\nroom air where the gain can be absorbed by a cooling system. This\nmeans that the cooling value associated with each sun vector should\nbe a step or two after the time of the sun vector. Lag time can\nbe longer than an hour if the room has a particularly high thermal\nmass or it may be shorter if the room has less mass or uses a radiant\ncooling system integrated into the floor where the sun is absorbed.\nNote that the value input here can be a decimal value to indicate\nthat the lag time is a fraction of an hour. (Default: 1.0 hour).", 
      "type": "double", 
      "default": null
    }, 
    {
      "access": "item", 
      "name": "_cpu_count_", 
      "description": "An integer to set the number of CPUs used in the execution of the\nintersection calculation. If unspecified, it will automatically default\nto one less than the number of CPUs currently available on the\nmachine or 1 if only one processor is available.", 
      "type": "int", 
      "default": null
    }, 
    {
      "access": "item", 
      "name": "_run", 
      "description": "Set to \"True\" to run the component and perform shade benefit analysis.", 
      "type": "int", 
      "default": null
    }
  ], 
  "subcategory": "5 :: Simulate", 
  "code": "\nimport os\nimport subprocess\nimport json\nimport math\n\ntry:\n    from ladybug_geometry.geometry3d import Mesh3D\nexcept ImportError as e:\n    raise ImportError('\\nFailed to import ladybug_geometry:\\n\\t{}'.format(e))\n\ntry:\n    from ladybug.futil import write_to_file_by_name, nukedir\n    from ladybug.sunpath import Sunpath\n    from ladybug.color import Colorset\n    from ladybug.graphic import GraphicContainer\n    from ladybug.epw import EPW\n    from ladybug.sql import SQLiteResult\n    from ladybug.datacollection import HourlyContinuousCollection\nexcept ImportError as e:\n    raise ImportError('\\nFailed to import ladybug:\\n\\t{}'.format(e))\n\ntry:\n    from honeybee.config import folders\n    from honeybee.boundarycondition import Outdoors\n    from honeybee.model import Model\nexcept ImportError as e:\n    raise ImportError('\\nFailed to import honeybee:\\n\\t{}'.format(e))\n\ntry:\n    from honeybee_energy.simulation.parameter import SimulationParameter\n    from honeybee_energy.run import run_idf\n    from honeybee_energy.result.err import Err\n    from honeybee_energy.writer import energyplus_idf_version\n    from honeybee_energy.config import folders as energy_folders\nexcept ImportError as e:\n    raise ImportError('\\nFailed to import honeybee_energy:\\n\\t{}'.format(e))\n\ntry:\n    from lbt_recipes.version import check_energyplus_version\nexcept ImportError as e:\n    raise ImportError('\\nFailed to import lbt_recipes:\\n\\t{}'.format(e))\n\ntry:\n    from ladybug_{{cad}}.togeometry import to_vector2d, to_joined_gridded_mesh3d\n    from ladybug_{{cad}}.fromgeometry import from_face3d, from_mesh3d, \\\n        from_point3d, from_vector3d\n    from ladybug_{{cad}}.config import conversion_to_meters, units_system, \\\n        tolerance, angle_tolerance, units_abbreviation\n    from ladybug_{{cad}}.fromobjects import legend_objects\n    from ladybug_{{cad}}.text import text_objects\n    from ladybug_{{cad}}.intersect import join_geometry_to_mesh, generate_intersection_rays, \\\n        intersect_rays_with_mesh_faces\n    from ladybug_{{cad}}.{{plugin}} import all_required_inputs, give_warning, hide_output, \\\n        recommended_processor_count\nexcept ImportError as e:\n    raise ImportError('\\nFailed to import ladybug_{{cad}}:\\n\\t{}'.format(e))\n\n\ndef serialize_data(data_dicts):\n    \"\"\"Reserialize a list of HourlyContinuousCollection dictionaries.\"\"\"\n    return [HourlyContinuousCollection.from_dict(data) for data in data_dicts]\n\n# List of all the output strings that will be requested\ncool_out = 'Zone Ideal Loads Supply Air Total Cooling Energy'\nheat_out = 'Zone Ideal Loads Supply Air Total Heating Energy'\nsolar_out = 'Surface Window Transmitted Beam Solar Radiation Energy'\nall_output = (cool_out, heat_out, solar_out)\n\n\nif all_required_inputs(ghenv.Component) and _run:\n    # check the presence of energyplus and check that the version is compatible\n    check_energyplus_version()\n\n    # set the defaults and process all of the inputs\n    workers = _cpu_count_ if _cpu_count_ is not None else recommended_processor_count()\n    timestep = _timestep_ if _timestep_ is not None else 1\n    lag_time = 1 if lag_time_ is None else lag_time_\n    lag_steps = int(timestep * lag_time)\n    if _north_ is not None:  # process the north_\n        try:\n            _north_ = math.degrees(\n                to_vector2d(_north_).angle_clockwise(Vector2D(0, 1)))\n        except AttributeError:  # north angle instead of vector\n            _north_ = float(north_)\n    else:\n        _north_ = 0\n\n    # gather all assigned shades and remove them from the rooms\n    rooms = [r.duplicate() for r in _rooms]  # duplicate to avoid editing input\n    ap_count, shd_count = 0, 0\n    shade_dict = {}\n    for room in rooms:\n        if room.properties.energy.is_conditioned and \\\n                room.properties.energy.setpoint is not None:\n            r_dict = {}\n            for face in room.faces:\n                if isinstance(face.boundary_condition, Outdoors):\n                    aps = face.apertures\n                    if len(aps) != 0:\n                        fap_ids, fap_geos, fshd_geos = [], [], []\n                        for ap in aps:\n                            fap_ids.append(ap.identifier.upper())\n                            fap_geos.append(from_face3d(ap.geometry))\n                            fshd_geos.extend(from_face3d(shd.geometry)\n                                             for shd in ap.outdoor_shades)\n                            ap.remove_shades()  # remove shades for the energy simulation\n                        if len(fshd_geos) != 0:\n                            r_dict[face.identifier] = {\n                                'ap_ids': fap_ids,\n                                'ap_geo': fap_geos,\n                                'shd_geo': fshd_geos,\n                                'normal': from_vector3d(face.normal)\n                            }\n                            ap_count += len(fap_geos)\n                            shd_count += len(fshd_geos)\n            if len(r_dict) != 0:\n                shade_dict[room.identifier.upper()] = r_dict\n\n    # make sure that there are shades to evaluate\n    if shd_count == 0:\n        msg = 'There were no shades to evaluate across all of the input _rooms.\\n' \\\n            'Make sure that shades are assigned to the apertures of conditioned\\n' \\\n            'rooms or use components like \"HB Louver Shades\" to generate shades\\n' \\\n            'that are assigned to the apertures.'\n        print(msg)\n        raise ValueError(msg)\n    else:\n        msg = 'Evaluating {} shade geometries across {} apertures.'.format(\n            shd_count, ap_count)\n        print(msg)\n\n    # create the Model from the _rooms and context_\n    _model = Model('Load_Shade_Benefit', rooms, orphaned_shades=context_,\n                   units=units_system(),\n                   tolerance=tolerance, angle_tolerance=angle_tolerance)\n\n    # process the simulation folder name and the directory\n    directory = os.path.join(folders.default_simulation_folder, _model.identifier)\n    sch_directory = os.path.join(directory, 'schedules')\n    nukedir(directory)  # delete any existing files in the directory\n\n    # create simulation parameters for the coarsest/fastest E+ sim possible\n    _sim_par_ = SimulationParameter()\n    _sim_par_.timestep = timestep\n    _sim_par_.north_angle = _north_\n    _sim_par_.shadow_calculation.solar_distribution = 'FullExterior'\n    _sim_par_.output.reporting_frequency = 'Timestep'\n    _sim_par_.output.include_html = False\n    for out_p in all_output:\n        _sim_par_.output.add_output(out_p)\n\n    # assign design days from the EPW\n    msg = None\n    folder, epw_file_name = os.path.split(_epw_file)\n    ddy_file = os.path.join(folder, epw_file_name.replace('.epw', '.ddy'))\n    if os.path.isfile(ddy_file):\n        try:\n            _sim_par_.sizing_parameter.add_from_ddy_996_004(ddy_file)\n        except AssertionError:\n            msg = 'No design days were found in the .ddy file next to the _epw_file.'\n    else:\n         msg = 'No .ddy file was found next to the _epw_file.'\n    if msg is not None:\n        epw_obj = EPW(_epw_file)\n        des_days = [epw_obj.approximate_design_day('WinterDesignDay'),\n                    epw_obj.approximate_design_day('SummerDesignDay')]\n        _sim_par_.sizing_parameter.design_days = des_days\n        msg = msg + '\\nDesign days were generated from the input _epw_file but this ' \\\n            '\\nis not as accurate as design days from DDYs distributed with the EPW.'\n        give_warning(ghenv.Component, msg)\n        print(msg)\n\n    # create the strings for simulation paramters and model\n    ver_str = energyplus_idf_version() if energy_folders.energyplus_version \\\n        is not None else energyplus_idf_version(compatibe_ep_version)\n    sim_par_str = _sim_par_.to_idf()\n    model_str = _model.to.idf(\n        _model, schedule_directory=sch_directory, patch_missing_adjacencies=True)\n    idf_str = '\\n\\n'.join([ver_str, sim_par_str, model_str])\n\n    # write the final string into an IDF\n    idf = os.path.join(directory, 'in.idf')\n    write_to_file_by_name(directory, 'in.idf', idf_str, True)\n\n    # run the IDF through EnergyPlus\n    silent = True if _run == 1 else False\n    sql, zsz, rdd, html, err = run_idf(idf, _epw_file, silent=silent)\n    if sql is None and err is not None:  # something went wrong; parse the errors\n        err_obj = Err(err)\n        print(err_obj.file_contents)\n        for error in err_obj.fatal_errors:\n            raise Exception(error)\n\n    # parse the result sql and get the timestep data collections\n    if os.name == 'nt':  # we are on windows; use IronPython like usual\n        sql_obj = SQLiteResult(sql)\n        cooling = sql_obj.data_collections_by_output_name(cool_out)\n        heating = sql_obj.data_collections_by_output_name(heat_out)\n        solar = sql_obj.data_collections_by_output_name(solar_out)\n    else:  # we are on Mac; sqlite3 module doesn't work in Mac IronPython\n        # Execute the honybee CLI to obtain the results via CPython\n        cmds = [folders.python_exe_path, '-m', 'honeybee_energy', 'result',\n                'data-by-outputs', sql]\n        for outp in all_output:\n            cmds.append('[\"{}\"]'.format(outp))\n        custom_env = os.environ.copy()\n        custom_env['PYTHONHOME'] = ''\n        process = subprocess.Popen(cmds, stdout=subprocess.PIPE, env=custom_env)\n        stdout = process.communicate()\n        data_coll_dicts = json.loads(stdout[0])\n        cooling = serialize_data(data_coll_dicts[0])\n        heating = serialize_data(data_coll_dicts[1])\n        solar = serialize_data(data_coll_dicts[2])\n\n    # convert the results to a dictionary for quick access\n    cool_dict, heat_dict, solar_dict = {}, {}, {}\n    for cool in cooling:\n        cool_dict[cool.header.metadata['System'].split(' ')[0]] = cool\n    for heat in heating:\n        heat_dict[heat.header.metadata['System'].split(' ')[0]] = heat\n    for sol in solar:\n        solar_dict[sol.header.metadata['Surface']] = sol\n\n    # initialize sunpath based on the EPW and get all of the vectors\n    epw_obj = EPW(_epw_file)\n    location = epw_obj.location\n    sp = Sunpath.from_location(location, _north_)\n    lb_vecs, relevant_i = [], []\n    for i, dt in enumerate(solar[0].datetimes):\n        sun = sp.calculate_sun_from_date_time(dt)\n        if sun.is_during_day:\n            lb_vecs.append(sun.sun_vector_reversed)\n            relevant_i.append(i)\n    vectors = [from_vector3d(lb_vec) for lb_vec in lb_vecs]\n\n    # if there is context, remove any rays that are blocked by the context\n    context_mesh = None\n    if len(context_) != 0 and context_[0] is not None:\n        context_mesh = join_geometry_to_mesh([from_face3d(c.geometry) for c in context_])\n\n    # loop through the relevant rooms and compute shade benefit\n    points, mesh = [], []\n    shade_help, shade_harm, shade_net = [], [], []\n    hide_output(ghenv.Component, 2)\n    for room_id, room_data in shade_dict.items():\n        cool_vals = cool_dict[room_id].values\n        heat_vals = heat_dict[room_id].values\n        # shif the values by the lag\n        cool_vals = cool_vals[-lag_steps:] + cool_vals[:-lag_steps]\n        heat_vals = heat_vals[-lag_steps:] + heat_vals[:-lag_steps] \n        for ap_data in room_data.values():\n            solar_vals = solar_dict[ap_data['ap_ids'][0]]\n            for ap_id in ap_data['ap_ids'][1:]:\n                solar_vals += solar_dict[ap_id]\n\n            # create the gridded mesh from the geometry\n            analysis_mesh = to_joined_gridded_mesh3d(ap_data['shd_geo'], _grid_size)\n            ap_mesh = from_mesh3d(analysis_mesh)\n            study_mesh = to_joined_gridded_mesh3d(ap_data['ap_geo'], _grid_size / 1.75)\n            ap_points = [from_point3d(pt) for pt in study_mesh.face_centroids]\n            points.extend(ap_points)\n            mesh.append(analysis_mesh)\n\n            # create a series of rays that represent the sun projected through the shade\n            int_rays = generate_intersection_rays(ap_points, vectors)\n            normals = [ap_data['normal']] * len(int_rays)\n\n            # intersect the sun rays with the shade mesh\n            face_int = intersect_rays_with_mesh_faces(\n                ap_mesh, int_rays, context_mesh, normals, cpu_count=workers)\n\n            # loop through the face intersection result and evaluate the benefit\n            pt_div = 1 / float(len(ap_points))\n            for face_res, face_area in zip(face_int, analysis_mesh.face_areas):\n                f_help, f_harm = 0, 0\n                for t_ind in face_res:\n                    ri = relevant_i[t_ind]\n                    cl, ht, sl = cool_vals[ri], heat_vals[ri], solar_vals[ri]\n                    if cl > 0:  # a step where shade helps\n                        f_help += min(cl, sl)\n                    elif ht > 0:\n                        f_harm -= min(ht, sl)\n                # Normalize by the area of the cell so there's is a consistent metric\n                # between cells of different areas.\n                shd_help = ((f_help / face_area)) * pt_div\n                shd_harm = ((f_harm / face_area)) * pt_div\n                shade_help.append(shd_help)\n                shade_harm.append(shd_harm)\n                shade_net.append(shd_help + shd_harm)\n\n    # create the mesh and legend outputs\n    mesh = Mesh3D.join_meshes(mesh)\n    graphic = GraphicContainer(shade_net, mesh.min, mesh.max, legend_par_)\n    graphic.legend_parameters.title = 'kWh/{}2'.format(units_abbreviation())\n    if legend_par_ is None or legend_par_.are_colors_default:\n        graphic.legend_parameters.colors = reversed(Colorset.shade_benefit_harm())\n    if legend_par_ is None or legend_par_.min is None or legend_par_.max is None:\n        bnd_val = max(max(shade_net), abs(min(shade_net)))\n        if legend_par_ is None or legend_par_.min is None:\n            graphic.legend_parameters.min = -bnd_val\n        if legend_par_ is None or legend_par_.max is None:\n            graphic.legend_parameters.max = bnd_val\n    title = text_objects('Cooling/Heating Load Shade Benefit', graphic.lower_title_location,\n                         graphic.legend_parameters.text_height * 1.5,\n                         graphic.legend_parameters.font)\n\n    # create all of the visual outputs\n    mesh.colors = graphic.value_colors\n    mesh = from_mesh3d(mesh)\n    legend = legend_objects(graphic.legend)\n", 
  "category": "HB-Energy", 
  "name": "HB Load Shade Benefit", 
  "description": "Visualize the desirability of shade in terms of its impact on the annual heating\nand cooling loads of Honeybee Rooms.\n_\nThe calculation runs by performing a simple fast energy simulation of the\nconnected Honeybee Rooms without any shade other than context. The resulting\nheating/cooling loads are extracted at each timestep of the simulation along with\nthe direct (beam) solar gain through each of the Room's windows. Solar vectors\nare generated for each step of the simulation and projected from the Room's\nAperture geometries through the shades assigned to those Apertures.\n_\nSolar vectors for timesteps when the Room is cooling mode contribute positively\nto shade desirability (shade help) while solar vectors for hours when the\nRoom is heating mode contribute negatively (shade harm). This contribution\nis weighted by how much cooling or heating energy the Room requires at the\ntimestep along with the direct solar gain through each Aperture at the timestep.\n_\nThe component outputs a colored mesh of the shades assigned to the Room Apertures\nillustrating the net effect of shading each part of the geometry. A higher\nsaturation of blue indicates that shading the cell is desirable. A higher\nsaturation of red indicates that shading the cell is harmful (blocking more sun\nwhen the Room is in heating mode than cooling mode). Desaturated cells indicate\nthat shading the cell will have relatively little effect on the heating or\ncooling loads of the Room.\n_\nThe units for shade desirability are kWh of Room cooling load avoided per unit\narea of shade if the test cell of the shade is helpful (blue). If the test cell\nis harmful (red), the units are kWh of Room heating load increased per unit\narea of shade. So, if a given square meter of input _shade_geo has a shad\ndesirability of 10 kWh/m2, this means that a shade in this location provides\nroughly 10 kWh of avoided cooling load to the parent Room over the year.\n_\nThe method used by this component is based off of the Shaderade method developed\nby Jon Sargent, Jeffrey Niemasz and Christoph Reinhart. More information can be\nfound in the following publication document:\nSargent, Jon; Niemasz, Jeffrey; Reinhart, Christoph. SHADERADE: Combining\nRhinoceros and EnergyPlus for the Design of Static Exterior Shading Devices.\nBuilding Simulation, 2011, Sydney, Australia.\nhttp://www.ibpsa.org/proceedings/bs2011/p_1209.pdf\n-"
}
{
  "version": "1.2.1", 
  "nickname": "RunOSW", 
  "outputs": [
    [
      {
        "access": "None", 
        "name": "osm", 
        "description": "The file path to the OpenStudio Model (OSM) that has been generated\non this computer.", 
        "type": null, 
        "default": null
      }, 
      {
        "access": "None", 
        "name": "idf", 
        "description": "The file path of the IDF file that has been generated on this computer.", 
        "type": null, 
        "default": null
      }, 
      {
        "access": "None", 
        "name": "sql", 
        "description": "The file path of the SQL result file that has been generated on your\nmachine. This will be None unless run_ is set to True.", 
        "type": null, 
        "default": null
      }, 
      {
        "access": "None", 
        "name": "zsz", 
        "description": "Path to a .csv file containing detailed zone load information recorded\nover the course of the design days. This will be None unless run_ is\nset to True.", 
        "type": null, 
        "default": null
      }, 
      {
        "access": "None", 
        "name": "rdd", 
        "description": "The file path of the Result Data Dictionary (.rdd) file that is\ngenerated after running the file through EnergyPlus.  This file\ncontains all possible outputs that can be requested from the EnergyPlus\nmodel.  Use the Read Result Dictionary component to see what outputs\ncan be requested.", 
        "type": null, 
        "default": null
      }, 
      {
        "access": "None", 
        "name": "html", 
        "description": "The HTML file path of the Summary Reports. Note that this will be None\nunless the input _sim_par_ denotes that an HTML report is requested and\nrun_ is set to True.", 
        "type": null, 
        "default": null
      }
    ]
  ], 
  "inputs": [
    {
      "access": "list", 
      "name": "_osw", 
      "description": "Path to an OSW file as a text string. This can also be a list of\nOSW files.", 
      "type": "string", 
      "default": null
    }, 
    {
      "access": "item", 
      "name": "_epw_file", 
      "description": "Path to an .epw file as a text string.", 
      "type": "string", 
      "default": null
    }, 
    {
      "access": "list", 
      "name": "add_str_", 
      "description": "THIS OPTION IS JUST FOR ADVANCED USERS OF ENERGYPLUS.\nYou can input additional text strings here that you would like\nwritten into the IDF.  The strings input here should be complete\nEnergyPlus objects that are correctly formatted. This input can be used to\nwrite objects into the IDF that are not currently supported by Honeybee.", 
      "type": "string", 
      "default": null
    }, 
    {
      "access": "item", 
      "name": "_cpu_count_", 
      "description": "An integer to set the number of CPUs used in the execution of each\nconnected OSW file. If unspecified, it will automatically default\nto one less than the number of CPUs currently available on the\nmachine (or 1 if only one processor is available).", 
      "type": "int", 
      "default": null
    }, 
    {
      "access": "item", 
      "name": "_translate", 
      "description": "Set to \"True\" to execute the input OSWs using the OpenStudio\ncommand line interface (CLI). This will translate any honeybee jsons\nreferenced in the osw to an osm and idf file.", 
      "type": "bool", 
      "default": null
    }, 
    {
      "access": "item", 
      "name": "run_", 
      "description": "Set to \"True\" to run the resulting IDF through EnergyPlus.\n_\nThis input can also be the integer \"2\", which will run the whole\ntranslation and simulation silently (without any batch windows).", 
      "type": "int", 
      "default": null
    }
  ], 
  "subcategory": "5 :: Simulate", 
  "code": "\ntry:\n    from honeybee_energy.run import run_osw, run_idf\n    from honeybee_energy.result.err import Err\nexcept ImportError as e:\n    raise ImportError('\\nFailed to import honeybee_energy:\\n\\t{}'.format(e))\n\ntry:\n    from ladybug_{{cad}}.{{plugin}} import all_required_inputs, give_warning, \\\n        recommended_processor_count, run_function_in_parallel\nexcept ImportError as e:\n    raise ImportError('\\nFailed to import ladybug_{{cad}}:\\n\\t{}'.format(e))\n\n\ndef run_osw_and_report_errors(i):\n    \"\"\"Run an OSW through OpenStudio CLI.\"\"\"\n    osw = _osw[i]\n    osm_i, idf_i = run_osw(osw, silent=silent)\n    # process the additional strings\n    if add_str_ != [] and add_str_[0] is not None and idf is not None:\n        add_str = '/n'.join(add_str_)\n        with open(idf, \"a\") as idf_file:\n            idf_file.write(add_str)\n    osm[i] = osm_i\n    idf[i] = idf_i\n\n    # run the IDF through EnergyPlus\n    if run_:\n        sql_i, zsz_i, rdd_i, html_i, err_i = run_idf(idf_i, _epw_file, silent=silent)\n\n        # report any errors on this component\n        if err_i is not None:\n            err_obj = Err(err_i)\n            err_objs[i] = err_obj\n            for warn in err_obj.severe_errors:\n                give_warning(ghenv.Component, warn)\n            for error in err_obj.fatal_errors:\n                print err_obj.file_contents  # print before raising the error\n                raise Exception(error)\n\n        # append everything to the global lists\n        sql[i] = sql_i\n        zsz[i] = zsz_i\n        rdd[i] = rdd_i\n        html[i] = html_i\n        err[i] = err_i\n\n\nif all_required_inputs(ghenv.Component) and _translate:\n    # global lists of outputs to be filled\n    iter_count = len(_osw)\n    osm = [None] * iter_count\n    idf = [None] * iter_count\n    sql = [None] * iter_count\n    zsz = [None] * iter_count\n    rdd = [None] * iter_count\n    html = [None] * iter_count\n    err = [None] * iter_count\n    err_objs = [None] * iter_count\n\n    # run the OSW files through OpenStudio CLI\n    silent = True if run_ == 2 else False\n    workers = _cpu_count_ if _cpu_count_ is not None else recommended_processor_count()\n    run_function_in_parallel(run_osw_and_report_errors, iter_count, workers)\n\n    # print out error report if it's only one file\n    # otherwise it's too much data to be read-able\n    if len(err_objs) == 1 and err_objs[0] is not None:\n        print(err_objs[0].file_contents)\n", 
  "category": "HB-Energy", 
  "name": "HB Run OSW", 
  "description": "Execute an OpenStudio workflow (.osw) and run the resulting IDF file through\nEnergyPlus.\n-"
}
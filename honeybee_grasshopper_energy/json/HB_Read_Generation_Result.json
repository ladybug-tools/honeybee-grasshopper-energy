{
  "version": "1.7.0", 
  "nickname": "GenerationResult", 
  "outputs": [
    [
      {
        "access": "None", 
        "name": "site_totals", 
        "description": "Two numbers indicating the following energy values in kWh.\n_\n* Total on-site produced electricity (postive number)\n* Total on-site electricity consumption (negative number)", 
        "type": null, 
        "default": null
      }, 
      {
        "access": "None", 
        "name": "utility_totals", 
        "description": "Three numbers indicating the following energy values in kWh.\n_\n* Total on-site produced electricity consumed on-site (positive number)\n* Total on-site produced surplus electricity sold to the utility (positive number)\n* Total electricity purchased from the utility (negative number)", 
        "type": null, 
        "default": null
      }, 
      {
        "access": "None", 
        "name": "production", 
        "description": "A data collection of all on-site produced electricity (kWh). This\nrepresents the alternating current (AC) electricity coming out of\nthe inverter that processes all on-site power production.", 
        "type": null, 
        "default": null
      }, 
      {
        "access": "None", 
        "name": "consumption", 
        "description": "A data collection of all on-site consumed electricity (kWh). This\nrepresents the electrcicity consumed by all heating, cooling, lighting\nequipment, fans, pumps, process loads, and water heaters. All of\nthis consumed electricity is assumed to be alternating current (AC).", 
        "type": null, 
        "default": null
      }, 
      {
        "access": "None", 
        "name": "dc_power", 
        "description": "A list of data collections for the direct current (DC) electricity\nproduced by each on-site electricity generator (kWh). Each\nphotovoltaic object will have a separate data collection.", 
        "type": null, 
        "default": null
      }
    ]
  ], 
  "inputs": [
    {
      "access": "list", 
      "name": "_sql", 
      "description": "The file path of the SQL result file that has been generated from\nan energy simulation.", 
      "type": "string", 
      "default": null
    }
  ], 
  "subcategory": "6 :: Result", 
  "code": "\nimport os\nimport subprocess\nimport json\n\ntry:\n    from ladybug.datacollection import HourlyContinuousCollection, \\\n        MonthlyCollection, DailyCollection\n    from ladybug.sql import SQLiteResult\nexcept ImportError as e:\n    raise ImportError('\\nFailed to import ladybug:\\n\\t{}'.format(e))\n\ntry:\n    from honeybee.config import folders\nexcept ImportError as e:\n    raise ImportError('\\nFailed to import honeybee:\\n\\t{}'.format(e))\n\ntry:\n    from honeybee_energy.result.generation import generation_summary_from_sql, \\\n        generation_data_from_sql\nexcept ImportError as e:\n    raise ImportError('\\nFailed to import honeybee_energy:\\n\\t{}'.format(e))\n\ntry:\n    from ladybug_{{cad}}.{{plugin}} import all_required_inputs\nexcept ImportError as e:\n    raise ImportError('\\nFailed to import ladybug_{{cad}}:\\n\\t{}'.format(e))\n\n\n# The SQLite3 module doesn't work in IronPython on Mac, so we must make a call\n# to the Honeybee CLI (which runs on CPython) to get the results.\ndef get_results_mac(sql_files):\n    from collections import OrderedDict\n    cmds = [folders.python_exe_path, '-m', 'honeybee_energy', 'result',\n            'generation-summary']\n    cmds.extend(sql_files)\n    process = subprocess.Popen(cmds, stdout=subprocess.PIPE, env=custom_env)\n    stdout = process.communicate()\n    results = json.loads(stdout[0])\n    return results\n\n\ndef serialize_data(data_dicts):\n    \"\"\"Reserialize a list of collection dictionaries.\"\"\"\n    if len(data_dicts) == 0 or data_dicts[0] is None:\n        return [None] * len(data_dicts)\n    elif data_dicts[0]['type'] == 'HourlyContinuous':\n        return [HourlyContinuousCollection.from_dict(data) for data in data_dicts]\n    elif data_dicts[0]['type'] == 'Monthly':\n        return [MonthlyCollection.from_dict(data) for data in data_dicts]\n    elif data_dicts[0]['type'] == 'Daily':\n        return [DailyCollection.from_dict(data) for data in data_dicts]\n\nDC_OUTPUT = 'Generator Produced DC Electricity Energy'\ncustom_env = os.environ.copy()\ncustom_env['PYTHONHOME'] = ''\n\n\nif all_required_inputs(ghenv.Component):\n    dc_power = []\n    if os.name == 'nt':  # we are on windows; use IronPython like usual\n        result_dict = generation_summary_from_sql(_sql)\n        production, consumption = generation_data_from_sql(_sql)\n        for sql_f in _sql:\n            sql_obj = SQLiteResult(sql_f)\n            dc_data = sql_obj.data_collections_by_output_name(DC_OUTPUT)\n            dc_power.extend(dc_data)\n\n    else:  # we are on Mac; sqlite3 module doesn't work in Mac IronPython\n        # Execute the honybee CLI to obtain the results via CPython\n        result_dict = get_results_mac(_sql)\n        cmds = [folders.python_exe_path, '-m', 'honeybee_energy', 'result',\n                'generation-data']\n        cmds.extend(_sql)\n        process = subprocess.Popen(cmds, stdout=subprocess.PIPE, env=custom_env)\n        stdout = process.communicate()\n        data_dicts = json.loads(stdout[0])\n        production, consumption = serialize_data(data_dicts)\n\n        for sql_f in _sql:\n            cmds = [folders.python_exe_path, '-m', 'honeybee_energy', 'result',\n                    'data-by-outputs', sql_f, DC_OUTPUT]\n            process = subprocess.Popen(cmds, stdout=subprocess.PIPE, env=custom_env)\n            stdout = process.communicate()\n            data_dicts = json.loads(stdout[0])\n            dc_data = serialize_data(data_dicts[0])\n            dc_power.extend(dc_data)\n\n    # output the separate summary results\n    site_totals = (\n        result_dict['total_production'],\n        result_dict['total_consumption']\n    )\n    utility_totals = (\n        result_dict['production_used_on_site'],\n        result_dict['production_surplus_sold'],\n        result_dict['consumption_purchased']\n    )\n", 
  "category": "HB-Energy", 
  "name": "HB Read Generation Result", 
  "description": "Parse any time series data from an energy simulation SQL result file.\n-"
}
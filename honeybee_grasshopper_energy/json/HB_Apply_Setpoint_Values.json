{
  "version": "1.2.0", 
  "nickname": "ApplySetpointVals", 
  "outputs": [
    [
      {
        "access": "None", 
        "name": "mod_obj", 
        "description": "The input Rooms or ProgramTypes with their setpoint values edited.", 
        "type": null, 
        "default": null
      }
    ]
  ], 
  "inputs": [
    {
      "access": "list", 
      "name": "_room_or_program", 
      "description": "Honeybee Rooms or ProgramType objects to which the input\nsetpoints should be assigned. This can also be the identifier of a\nProgramType to be looked up in the program type library.", 
      "type": "System.Object", 
      "default": null
    }, 
    {
      "access": "list", 
      "name": "cooling_setpt_", 
      "description": "A numerical value for a single constant temperature for\nthe cooling setpoint [C].", 
      "type": "double", 
      "default": null
    }, 
    {
      "access": "list", 
      "name": "heating_setpt_", 
      "description": "A numerical value for a single constant temperature for\nthe heating setpoint [C].", 
      "type": "double", 
      "default": null
    }, 
    {
      "access": "list", 
      "name": "humid_setpt_", 
      "description": "A numerical value for a single constant value for the\nhumidifying setpoint [%].", 
      "type": "double", 
      "default": null
    }, 
    {
      "access": "list", 
      "name": "dehumid_setpt_", 
      "description": "A numerical value for a single constant value for the\ndehumidifying setpoint [%].", 
      "type": "double", 
      "default": null
    }
  ], 
  "subcategory": "3 :: Loads", 
  "code": "\nimport uuid\n\ntry:\n    from honeybee.room import Room\nexcept ImportError as e:\n    raise ImportError('\\nFailed to import honeybee:\\n\\t{}'.format(e))\n\ntry:\n    from honeybee_energy.load.setpoint import Setpoint\n    from honeybee_energy.schedule.ruleset import ScheduleRuleset\n    import honeybee_energy.lib.scheduletypelimits as _type_lib\n    from honeybee_energy.lib.programtypes import program_type_by_identifier\n    from honeybee_energy.programtype import ProgramType\nexcept ImportError as e:\n    raise ImportError('\\nFailed to import honeybee_energy:\\n\\t{}'.format(e))\ntry:\n    from ladybug_{{cad}}.{{plugin}} import all_required_inputs, longest_list\nexcept ImportError as e:\n    raise ImportError('\\nFailed to import ladybug_{{cad}}:\\n\\t{}'.format(e))\n\n\ndef dup_setpoint(hb_obj):\n    \"\"\"Duplicate a setpoint object assigned to a Room or ProgramType.\"\"\"\n    # try to get the setpoint object assgined to the Room or ProgramType\n    try:  # assume it's a Room\n        setpt_obj = hb_obj.properties.energy.setpoint\n    except AttributeError:  # it's a ProgramType\n        setpt_obj = hb_obj.setpoint\n\n    load_id = '{}_Setpoint'.format(hb_obj.identifier)\n    try:  # duplicate the setpoint object\n        dup_load = setpt_obj.duplicate()\n        dup_load.identifier = load_id\n        return dup_load\n    except AttributeError:  # create a new object if it does not exist\n        heat_sch = ScheduleRuleset.from_constant_value(\n            '{}_HtgSetp'.format(hb_obj.identifier), -50, _type_lib.temperature)\n        cool_sch = ScheduleRuleset.from_constant_value(\n            '{}_ClgSetp'.format(hb_obj.identifier), 50, _type_lib.temperature)\n        return Setpoint(load_id, heat_sch, cool_sch)\n\n\ndef assign_setpoint(hb_obj, setpt_obj):\n    \"\"\"Assign a setpoint object to a Room or a ProgramType.\"\"\"\n    try:  # assume it's a Room\n        hb_obj.properties.energy.setpoint = setpt_obj\n    except AttributeError:  # it's a ProgramType\n        hb_obj.setpoint = setpt_obj\n\n\ndef duplicate_and_id_program(program):\n    \"\"\"Duplicate a program and give it a new unique ID.\"\"\"\n    new_prog = program.duplicate()\n    new_prog.identifier = '{}_{}'.format(program.identifier, str(uuid.uuid4())[:8])\n    return new_prog\n\n\nif all_required_inputs(ghenv.Component):\n    # duplicate the initial objects\n    mod_obj = []\n    for obj in _room_or_program:\n        if isinstance(obj, Room):\n            mod_obj.append(obj.duplicate())\n        elif isinstance(obj, ProgramType):\n            mod_obj.append(duplicate_and_id_program(obj))\n        elif isinstance(obj, str):\n            program = program_type_by_identifier(obj)\n            mod_obj.append(duplicate_and_id_program(program))\n        else:\n            raise TypeError('Expected Honeybee Room or ProgramType. '\n                            'Got {}.'.format(type(obj)))\n\n    # assign the cooling_setpt_\n    if len(cooling_setpt_) != 0:\n        for i, obj in enumerate(mod_obj):\n            setpoint = dup_setpoint(obj)\n            setpoint.cooling_setpoint = longest_list(cooling_setpt_, i)\n            assign_setpoint(obj, setpoint)\n\n    # assign the heating_setpt_\n    if len(heating_setpt_) != 0:\n        for i, obj in enumerate(mod_obj):\n            setpoint = dup_setpoint(obj)\n            setpoint.heating_setpoint = longest_list(heating_setpt_, i)\n            assign_setpoint(obj, setpoint)\n\n    # assign the humid_setpt_\n    if len(humid_setpt_) != 0:\n        for i, obj in enumerate(mod_obj):\n            setpoint = dup_setpoint(obj)\n            setpoint.humidifying_setpoint = longest_list(humid_setpt_, i)\n            assign_setpoint(obj, setpoint)\n\n    # assign the dehumid_setpt_\n    if len(dehumid_setpt_) != 0:\n        for i, obj in enumerate(mod_obj):\n            setpoint = dup_setpoint(obj)\n            setpoint.dehumidifying_setpoint = longest_list(dehumid_setpt_, i)\n            assign_setpoint(obj, setpoint)\n", 
  "category": "HB-Energy", 
  "name": "HB Apply Setpoint Values", 
  "description": "Apply values for setpoints to a Room or ProgramType.\n-"
}
{
  "version": "1.2.0", 
  "nickname": "AnnualLoads", 
  "outputs": [
    [
      {
        "access": "None", 
        "name": "total_load", 
        "description": "A list of numbers for the 4-5 output load terms normalized by the floor\narea of the input _rooms. Units are kWh/m2. They are ordered\nas follows.\n_\n* cooling\n* heating\n* lighting\n* electric equipment\n* gas equipment (if the input rooms have it)\n* service hot water (if the input rooms have it)", 
        "type": null, 
        "default": null
      }, 
      {
        "access": "None", 
        "name": "cooling", 
        "description": "A monthly Data Collection for the cooling load intensity in kWh/m2.", 
        "type": null, 
        "default": null
      }, 
      {
        "access": "None", 
        "name": "heating", 
        "description": "A monthly Data Collection for the heating load intensity in kWh/m2.", 
        "type": null, 
        "default": null
      }, 
      {
        "access": "None", 
        "name": "lighting", 
        "description": "A monthly Data Collection for the lighting load intensity in kWh/m2.", 
        "type": null, 
        "default": null
      }, 
      {
        "access": "None", 
        "name": "equip", 
        "description": "A monthly Data Collection for the equipment load intensity in kWh/m2.\nTypically, this is only the load from electric equipment but, if\nthe attached _rooms have gas equipment, this will be a list of two\ndata collections for electric and gas equipment respectively.", 
        "type": null, 
        "default": null
      }, 
      {
        "access": "None", 
        "name": "hot_water", 
        "description": "A monthly Data Collection for the service hot water load intensity\nin kWh/m2.", 
        "type": null, 
        "default": null
      }, 
      {
        "access": "None", 
        "name": "balance", 
        "description": "A list of monthly data collections for the various terms of the\nfloor-normalized load balance in kWh/m2. Will be None unless\nrun_bal_ is set to True.", 
        "type": null, 
        "default": null
      }
    ]
  ], 
  "inputs": [
    {
      "access": "list", 
      "name": "_rooms", 
      "description": "A list of Honeybee Rooms for which annual loads will be computed.", 
      "type": "System.Object", 
      "default": null
    }, 
    {
      "access": "list", 
      "name": "shades_", 
      "description": "An optional list of Honeybee Shades that can block the sun to\nthe input _rooms.", 
      "type": "System.Object", 
      "default": null
    }, 
    {
      "access": "item", 
      "name": "_epw_file", 
      "description": "Path to an .epw file on your system as a text string.", 
      "type": "string", 
      "default": null
    }, 
    {
      "access": "item", 
      "name": "_timestep_", 
      "description": "An integer for the number of timesteps per hour at which the\nenergy balance calculation will be run. This has a dramatic\nimpact on the speed of the simulation and the accuracy of\nresults. Higher timesteps lead to longer simulations and\nmore accurate results. At the lowest aceptable timestep of 1,\nthe results can have an error up to 5% but increasing the\ntimestep to 4 should drop errors to below 1%. (Default: 1).\nThe following values are acceptable:\n(1, 2, 3, 4, 5, 6, 10, 12, 15, 20, 30, 60)", 
      "type": "int", 
      "default": null
    }, 
    {
      "access": "item", 
      "name": "_cool_cop_", 
      "description": "An optional number which the cooling load will be divided by to\naccount for the relative importance of cooling loads compared\nto heating loads (aka. the Coefficient of Performance or COP).\nFor most cooling systems, this is value greater than 1, though\nhow much greater varies widely between cooling systems and it is\nultimately a function of how close the temperature of the cooling\nsystem's heat sink is to the room temperature setpoints. If set to 1,\nthe output cooling will be the energy that must be removed from the\n_rooms to meet the setpoint (aka. the cooling demand). (Default: 1).", 
      "type": "double", 
      "default": null
    }, 
    {
      "access": "item", 
      "name": "_heat_cop_", 
      "description": "An optional number which the heating load will be divided by to\naccount for the relative importance of heating loads compared\nto cooling loads (aka. the Coefficient of Performance or COP).\nFor fuel-based systems like gas boilers, this value tends to be\nless than 1 in order to represent the efficiency of the boiler\nand account for losses of heat, such as that through flue gases.\nFor certain electric systems like heat pumps, this can be a value\ngreater than 1 as such pumps may be able to pump more heat energy\ninto a room per unit of electricity consumed. If set to 1, the\noutput will be the energy that must be added to the _rooms to meet\nthe setpoint (aka. the heating demand). (Default: 1).", 
      "type": "double", 
      "default": null
    }, 
    {
      "access": "item", 
      "name": "run_bal_", 
      "description": "Set to True to have the full load balance computed after the\nsimulation is run. This ensures that data collections for various\nterms of the load balance are output from the \"balance\".\nThis can help explain why the loads are what they are but can\nalso increase the component run time. (Default: False).", 
      "type": "bool", 
      "default": null
    }, 
    {
      "access": "item", 
      "name": "_run", 
      "description": "Set to \"True\" to run the simulation to obtain annual loads. This can\nalso be the integer 2 to run the simulation while being able to see\nthe simulation process (with a batch window).", 
      "type": "int", 
      "default": null
    }
  ], 
  "subcategory": "5 :: Simulate", 
  "code": "\nimport os\nimport subprocess\nimport json\n\ntry:\n    from ladybug.futil import write_to_file_by_name, nukedir\n    from ladybug.epw import EPW\n    from ladybug.sql import SQLiteResult\n    from ladybug.datacollection import MonthlyCollection\n    from ladybug.header import Header\n    from ladybug.analysisperiod import AnalysisPeriod\n    from ladybug.datatype.energyintensity import EnergyIntensity\nexcept ImportError as e:\n    raise ImportError('\\nFailed to import ladybug:\\n\\t{}'.format(e))\n\ntry:\n    from honeybee.config import folders\n    from honeybee.model import Model\nexcept ImportError as e:\n    raise ImportError('\\nFailed to import honeybee:\\n\\t{}'.format(e))\n\ntry:\n    from honeybee_energy.result.loadbalance import LoadBalance\n    from honeybee_energy.simulation.parameter import SimulationParameter\n    from honeybee_energy.run import run_idf\n    from honeybee_energy.result.err import Err\n    from honeybee_energy.writer import energyplus_idf_version\n    from honeybee_energy.config import folders as energy_folders\nexcept ImportError as e:\n    raise ImportError('\\nFailed to import honeybee_energy:\\n\\t{}'.format(e))\n\ntry:\n    from lbt_recipes.version import check_energyplus_version\nexcept ImportError as e:\n    raise ImportError('\\nFailed to import lbt_recipes:\\n\\t{}'.format(e))\n\ntry:\n    from ladybug_{{cad}}.config import conversion_to_meters, tolerance, angle_tolerance\n    from ladybug_{{cad}}.{{plugin}} import all_required_inputs, give_warning\nexcept ImportError as e:\n    raise ImportError('\\nFailed to import ladybug_{{cad}}:\\n\\t{}'.format(e))\n\n\ndef check_window_vent(rooms):\n    \"\"\"Check a rooms to make sure there's no opening of windows as coarse timestep.\"\"\"\n    for room in rooms:\n        if room.properties.energy.window_vent_control is not None:\n            msg = 'Window ventilation was detected but your timestep is too low ' \\\n                'to model window opening correctly.\\nIt is recommended that you ' \\\n                'increase your timestep to at least 4 to get loads for this case.'\n            print msg\n            give_warning(ghenv.Component, msg)\n\n\ndef data_to_load_intensity(data_colls, floor_area, data_type, cop=1):\n    \"\"\"Convert data collections output by EnergyPlus to a single load intensity collection.\n\n    Args:\n        data_colls: A list of monthly data collections for an energy term.\n        floor_area: The total floor area of the rooms, used to compute EUI.\n        data_type: Text for the data type of the collections (eg. \"Cooling\").\n        cop: Optional number for the COP, which the results will be divided by.\n    \"\"\"\n    if len(data_colls) != 0:\n        total_vals = [sum(month_vals) / floor_area for month_vals in zip(*data_colls)]\n        if cop != 1:\n            total_vals = [val / cop for val in total_vals]\n    else:  # just make a \"filler\" collection of 0 values\n        total_vals = [0] * 12\n    meta_dat = {'type': data_type}\n    total_head = Header(EnergyIntensity(), 'kWh/m2', AnalysisPeriod(), meta_dat)\n    return MonthlyCollection(total_head, total_vals, range(12))\n\n\ndef serialize_data(data_dicts):\n    \"\"\"Reserialize a list of MonthlyCollection dictionaries.\"\"\"\n    return [MonthlyCollection.from_dict(data) for data in data_dicts]\n\n\n# List of all the output strings that will be requested\ncool_out = 'Zone Ideal Loads Supply Air Total Cooling Energy'\nheat_out = 'Zone Ideal Loads Supply Air Total Heating Energy'\nlight_out = 'Zone Lights Electricity Energy'\nel_equip_out = 'Zone Electric Equipment Electricity Energy'\ngas_equip_out = 'Zone Gas Equipment NaturalGas Energy'\nshw_out = 'Water Use Equipment Heating Energy'\ngl_el_equip_out = 'Zone Electric Equipment Total Heating Energy'\ngl_gas_equip_out = 'Zone Gas Equipment Total Heating Energy'\ngl1_shw_out = 'Water Use Equipment Zone Sensible Heat Gain Energy'\ngl2_shw_out = 'Water Use Equipment Zone Latent Gain Energy'\nenergy_output = (cool_out, heat_out, light_out, el_equip_out, gas_equip_out, shw_out)\n\n\nif all_required_inputs(ghenv.Component) and _run:\n    # check the presence of energyplus and check that the version is compatible\n    check_energyplus_version()\n\n    # set defaults for COP\n    _heat_cop_ = 1 if _heat_cop_ is None else _heat_cop_\n    _cool_cop_ = 1 if _cool_cop_ is None else _cool_cop_\n\n    # create the Model from the _rooms and shades_\n    _model = Model('Annual_Loads', _rooms, orphaned_shades=shades_,\n                   tolerance=tolerance, angle_tolerance=angle_tolerance)\n    floor_area = _model.floor_area\n    assert floor_area != 0, 'Connected _rooms have no floors with which to compute EUI.'\n    floor_area = floor_area * conversion_to_meters() ** 2\n\n    # process the simulation folder name and the directory\n    directory = os.path.join(folders.default_simulation_folder, _model.identifier)\n    sch_directory = os.path.join(directory, 'schedules')\n    nukedir(directory)  # delete any existing files in the directory\n\n    # create simulation parameters for the coarsest/fastest E+ sim possible\n    _sim_par_ = SimulationParameter()\n    _sim_par_.timestep = _timestep_ if _timestep_ is not None else 1\n    _sim_par_.shadow_calculation.solar_distribution = 'FullExterior'\n    _sim_par_.output.add_zone_energy_use()\n    _sim_par_.output.reporting_frequency = 'Monthly'\n    if run_bal_:\n        _sim_par_.output.add_output(gl_el_equip_out)\n        _sim_par_.output.add_output(gl_gas_equip_out)\n        _sim_par_.output.add_output(gl1_shw_out)\n        _sim_par_.output.add_output(gl2_shw_out)\n        _sim_par_.output.add_gains_and_losses('Total')\n        _sim_par_.output.add_surface_energy_flow()\n\n    # check the rooms for inaccurate cases\n    if _sim_par_.timestep < 4:\n        check_window_vent(_rooms)\n\n    # assign design days from the EPW\n    msg = None\n    folder, epw_file_name = os.path.split(_epw_file)\n    ddy_file = os.path.join(folder, epw_file_name.replace('.epw', '.ddy'))\n    if os.path.isfile(ddy_file):\n        try:\n            _sim_par_.sizing_parameter.add_from_ddy_996_004(ddy_file)\n        except AssertionError:\n            msg = 'No design days were found in the .ddy file next to the _epw_file.'\n    else:\n         msg = 'No .ddy file was found next to the _epw_file.'\n    if msg is not None:\n        epw_obj = EPW(_epw_file)\n        des_days = [epw_obj.approximate_design_day('WinterDesignDay'),\n                    epw_obj.approximate_design_day('SummerDesignDay')]\n        _sim_par_.sizing_parameter.design_days = des_days\n        msg = msg + '\\nDesign days were generated from the input _epw_file but this ' \\\n            '\\nis not as accurate as design days from DDYs distributed with the EPW.'\n        give_warning(ghenv.Component, msg)\n        print msg\n\n    # create the strings for simulation paramters and model\n    ver_str = energyplus_idf_version() if energy_folders.energyplus_version \\\n        is not None else energyplus_idf_version(compatibe_ep_version)\n    sim_par_str = _sim_par_.to_idf()\n    model_str = _model.to.idf(_model, schedule_directory=sch_directory)\n    idf_str = '\\n\\n'.join([ver_str, sim_par_str, model_str])\n\n    # write the final string into an IDF\n    idf = os.path.join(directory, 'in.idf')\n    write_to_file_by_name(directory, 'in.idf', idf_str, True)\n\n    # run the IDF through EnergyPlus\n    silent = True if _run == 1 else False\n    sql, zsz, rdd, html, err = run_idf(idf, _epw_file, silent=silent)\n    if html is None and err is not None:  # something went wrong; parse the errors\n        err_obj = Err(err)\n        print(err_obj.file_contents)\n        for error in err_obj.fatal_errors:\n            raise Exception(error)\n\n    # parse the result sql and get the monthly data collections\n    if os.name == 'nt':  # we are on windows; use IronPython like usual\n        sql_obj = SQLiteResult(sql)\n        cool_init = sql_obj.data_collections_by_output_name(cool_out)\n        heat_init = sql_obj.data_collections_by_output_name(heat_out)\n        light_init = sql_obj.data_collections_by_output_name(light_out)\n        elec_equip_init = sql_obj.data_collections_by_output_name(el_equip_out)\n        gas_equip_init = sql_obj.data_collections_by_output_name(gas_equip_out)\n        shw_init = sql_obj.data_collections_by_output_name(shw_out)\n    else:  # we are on Mac; sqlite3 module doesn't work in Mac IronPython\n        # Execute the honybee CLI to obtain the results via CPython\n        cmds = [folders.python_exe_path, '-m', 'honeybee_energy', 'result',\n                'data-by-outputs', sql]\n        for outp in energy_output:\n            cmds.append('[\"{}\"]'.format(outp))\n        process = subprocess.Popen(cmds, stdout=subprocess.PIPE)\n        stdout = process.communicate()\n        data_coll_dicts = json.loads(stdout[0])\n        cool_init = serialize_data(data_coll_dicts[0])\n        heat_init = serialize_data(data_coll_dicts[1])\n        light_init = serialize_data(data_coll_dicts[2])\n        elec_equip_init = serialize_data(data_coll_dicts[3])\n        gas_equip_init = serialize_data(data_coll_dicts[4])\n        shw_init = serialize_data(data_coll_dicts[5])\n\n    # convert the results to EUI and ouput them\n    cooling = data_to_load_intensity(cool_init, floor_area, 'Cooling', _cool_cop_)\n    heating = data_to_load_intensity(heat_init, floor_area, 'Heating', _heat_cop_)\n    lighting = data_to_load_intensity(light_init, floor_area, 'Lighting')\n    equip = data_to_load_intensity(elec_equip_init, floor_area, 'Electric Equipment')\n    total_load = [cooling.total, heating.total, lighting.total, equip.total]\n\n    # add gas equipment if it is there\n    if len(gas_equip_init) != 0:\n        gas_equip = data_to_load_intensity(gas_equip_init, floor_area, 'Gas Equipment')\n        equip = [equip, gas_equip]\n        total_load.append(gas_equip.total)\n    hot_water = []\n    if len(shw_init) != 0:\n        hot_water = data_to_load_intensity(shw_init, floor_area, 'Service Hot Water')\n        total_load.append(hot_water.total)\n\n    # construct the load balance if requested\n    if run_bal_:\n        if os.name == 'nt':  # we are on windows; use IronPython like usual\n            bal_obj = LoadBalance.from_sql_file(_model, sql)\n            balance = bal_obj.load_balance_terms(True, True)\n        else:  # we are on Mac; sqlite3 module doesn't work in Mac IronPython\n            # Execute the honybee CLI to obtain the results via CPython\n            model_json = os.path.join(directory, 'in.hbjson')\n            with open(model_json, 'w') as fp:\n                json.dump(_model.to_dict(), fp)\n            cmds = [folders.python_exe_path, '-m', 'honeybee_energy', 'result',\n                    'load-balance', model_json, sql]\n            process = subprocess.Popen(cmds, stdout=subprocess.PIPE)\n            stdout = process.communicate()\n            balance = serialize_data(json.loads(stdout[0]))\n", 
  "category": "HB-Energy", 
  "name": "HB Annual Loads", 
  "description": "Run Honeybee Rooms through a quick energy simulation to obtain an estimate of\nannual heating, cooling, lighting and equipment loads.\n_\nNote that the default settings used by this component are only suitable for evaluating\nannual loads in the case where an error of up to 5% is acceptable. Also\nnote that annual loads are not the same as annual energy use or utility costs\nand, while the \"cop\" inputs can be used to approximate some effects of real\nheating + cooling systems, any evaulation of actual energy use, utility costs,\nor GHG emissions should be done by modeling a detailed HVAC using the \"HB\nModel to OSM\" component.\n-"
}
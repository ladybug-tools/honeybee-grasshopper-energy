{
  "version": "1.3.0", 
  "nickname": "ConstructionSet", 
  "outputs": [
    [
      {
        "access": "None", 
        "name": "constr_set", 
        "description": "A ConstructionSet object that can be assigned to Honeybee\nRooms in order to specify all default constructions on the Room.", 
        "type": null, 
        "default": null
      }
    ]
  ], 
  "inputs": [
    {
      "access": "item", 
      "name": "_name_", 
      "description": "Text to set the name for the ConstructionSet and to be incorporated\ninto a unique ConstructionSet identifier.", 
      "type": "string", 
      "default": null
    }, 
    {
      "access": "item", 
      "name": "base_constr_set_", 
      "description": "An optional ConstructionSet object that will be used\nas the starting point for the new ConstructionSet output from this\ncomponent. This can also be text for the name of a ConstructionSet\nwithin the library such as that output from the \"HB Search Construction\nSets\" component. If None, the Honeybee \"Generic Default Construction\nSet\" will be used as the base.", 
      "type": "System.Object", 
      "default": null
    }, 
    {
      "access": "list", 
      "name": "_exterior_subset_", 
      "description": "A construction subset list from the \"HB Exterior Construction\nSubset\" component. Note that None values in this list correspond to\nno change to the given construction in the base_constr_set_.", 
      "type": "System.Object", 
      "default": null
    }, 
    {
      "access": "list", 
      "name": "_ground_subset_", 
      "description": "A construction subset list from the \"HB Ground Construction\nSubset\" component. Note that None values in this list correspond to\nno change to the given construction in the base_constr_set_.", 
      "type": "System.Object", 
      "default": null
    }, 
    {
      "access": "list", 
      "name": "_interior_subset_", 
      "description": "A construction subset list from the \"HB Interior Construction\nSubset\" component. Note that None values in this list correspond to\nno change to the given construction in the base_constr_set_.", 
      "type": "System.Object", 
      "default": null
    }, 
    {
      "access": "list", 
      "name": "_subface_subset_", 
      "description": "A construction subset list from the \"HB Subface Subset\"\ncomponent. Note that None values in this list correspond to no\nchange to the given construction in the base_constr_set_.", 
      "type": "System.Object", 
      "default": null
    }
  ], 
  "subcategory": "0 :: Basic Properties", 
  "code": "\ntry:  # import the core honeybee dependencies\n    from honeybee.typing import clean_and_id_ep_string, clean_ep_string\nexcept ImportError as e:\n    raise ImportError('\\nFailed to import honeybee:\\n\\t{}'.format(e))\n\ntry:  # import the honeybee-energy dependencies\n    from honeybee_energy.constructionset import ConstructionSet\n    from honeybee_energy.lib.constructionsets import construction_set_by_identifier\nexcept ImportError as e:\n    raise ImportError('\\nFailed to import honeybee_energy:\\n\\t{}'.format(e))\n\ntry:  # import ladybug_{{cad}} dependencies\n    from ladybug_{{cad}}.{{plugin}} import all_required_inputs\nexcept ImportError as e:\n    raise ImportError('\\nFailed to import ladybug_{{cad}}:\\n\\t{}'.format(e))\n\n\nif all_required_inputs(ghenv.Component):\n    # get the base construction set\n    name = clean_and_id_ep_string('ConstructionSet') if _name_ is None else \\\n        clean_ep_string(_name_)\n    if base_constr_set_ is None:\n        constr_set = ConstructionSet(name)\n    else:\n        if isinstance(base_constr_set_, str):\n            base_constr_set_ = construction_set_by_identifier(base_constr_set_)\n        constr_set = base_constr_set_.duplicate()\n        constr_set.identifier = name\n        if _name_ is not None:\n            constr_set.display_name = _name_\n\n    # go through each input construction subset and assign it to the set\n    if len(_exterior_subset_) != 0:\n        assert len(_exterior_subset_) == 3, 'Input _exterior_subset_ is not valid.'\n        if _exterior_subset_[0] is not None:\n            constr_set.wall_set.exterior_construction = _exterior_subset_[0]\n        if _exterior_subset_[1] is not None:\n            constr_set.roof_ceiling_set.exterior_construction = _exterior_subset_[1]\n        if _exterior_subset_[2] is not None:\n            constr_set.floor_set.exterior_construction = _exterior_subset_[2]\n    \n    if len(_ground_subset_) != 0:\n        assert len(_ground_subset_) == 3, 'Input _ground_subset_ is not valid.'\n        if _ground_subset_[0] is not None:\n            constr_set.wall_set.ground_construction = _ground_subset_[0]\n        if _ground_subset_[1] is not None:\n            constr_set.roof_ceiling_set.ground_construction = _ground_subset_[1]\n        if _ground_subset_[2] is not None:\n            constr_set.floor_set.ground_construction = _ground_subset_[2]\n    \n    if len(_interior_subset_) != 0:\n        assert len(_interior_subset_) == 6, 'Input _interior_subset_ is not valid.'\n        if _interior_subset_[0] is not None:\n            constr_set.wall_set.interior_construction = _interior_subset_[0]\n        if _interior_subset_[1] is not None:\n            constr_set.roof_ceiling_set.interior_construction = _interior_subset_[1]\n        if _interior_subset_[2] is not None:\n            constr_set.floor_set.interior_construction = _interior_subset_[2]\n        if _interior_subset_[3] is not None:\n            constr_set.aperture_set.interior_construction = _interior_subset_[3]\n        if _interior_subset_[4] is not None:\n            constr_set.door_set.interior_construction = _interior_subset_[4]\n        if _interior_subset_[5] is not None:\n            constr_set.door_set.interior_glass_construction = _interior_subset_[5]\n    \n    if len(_subface_subset_) != 0:\n        assert len(_subface_subset_) == 6, 'Input _subface_subset_ is not valid.'\n        if _subface_subset_[0] is not None:\n            constr_set.aperture_set.window_construction = _subface_subset_[0]\n        if _subface_subset_[1] is not None:\n            constr_set.aperture_set.skylight_construction = _subface_subset_[1]\n        if _subface_subset_[2] is not None:\n            constr_set.aperture_set.operable_construction = _subface_subset_[2]\n        if _subface_subset_[3] is not None:\n            constr_set.door_set.exterior_construction = _subface_subset_[3]\n        if _subface_subset_[4] is not None:\n            constr_set.door_set.overhead_construction = _subface_subset_[4]\n        if _subface_subset_[5] is not None:\n            constr_set.door_set.exterior_glass_construction = _subface_subset_[5]\n", 
  "category": "HB-Energy", 
  "name": "HB ConstructionSet", 
  "description": "Create a ConstructionSet object containing all energy constructions needed to\ncreate an energy model. ConstructionSets can be assigned to Honeybee Rooms to\nspecify all default constructions on the Room.\n-"
}
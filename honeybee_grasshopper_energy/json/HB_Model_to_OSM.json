{
  "version": "1.9.3", 
  "nickname": "ModelToOSM", 
  "outputs": [
    [
      {
        "access": "None", 
        "name": "jsons", 
        "description": "The file paths to the honeybee JSON files that describe the Model and\nSimulationParameter. These will be translated to an OpenStudio model.", 
        "type": null, 
        "default": null
      }, 
      {
        "access": "None", 
        "name": "osw", 
        "description": "File path to the OpenStudio Workflow JSON on this machine (if necessary\nfor simulation). This workflow is executed using the OpenStudio\ncommand line interface (CLI) and it includes any connected\nmeasures_. Will be None if no OSW is needed for the simulation.", 
        "type": null, 
        "default": null
      }, 
      {
        "access": "None", 
        "name": "osm", 
        "description": "The file path to the OpenStudio Model (OSM) that has been generated\non this computer.", 
        "type": null, 
        "default": null
      }, 
      {
        "access": "None", 
        "name": "idf", 
        "description": "The file path of the EnergyPlus Input Data File (IDF) that has been\ngenerated on this computer.", 
        "type": null, 
        "default": null
      }, 
      {
        "access": "None", 
        "name": "sql", 
        "description": "The file path of the SQL result file that has been generated on this\ncomputer. This will be None unless run_ is set to True.", 
        "type": null, 
        "default": null
      }, 
      {
        "access": "None", 
        "name": "zsz", 
        "description": "Path to a .csv file containing detailed zone load information recorded\nover the course of the design days. This will be None unless run_ is\nset to True.", 
        "type": null, 
        "default": null
      }, 
      {
        "access": "None", 
        "name": "rdd", 
        "description": "The file path of the Result Data Dictionary (.rdd) file that is\ngenerated after running the file through EnergyPlus.  This file\ncontains all possible outputs that can be requested from the EnergyPlus\nmodel. Use the \"HB Read Result Dictionary\" component to see what outputs\ncan be requested.", 
        "type": null, 
        "default": null
      }, 
      {
        "access": "None", 
        "name": "html", 
        "description": "The HTML file path containing all requested Summary Reports.", 
        "type": null, 
        "default": null
      }
    ]
  ], 
  "inputs": [
    {
      "access": "item", 
      "name": "_model", 
      "description": "A honeybee model object possessing all geometry and corresponding\nenergy simulation properties.", 
      "type": "System.Object", 
      "default": null
    }, 
    {
      "access": "item", 
      "name": "_epw_file", 
      "description": "Path to an .epw file on this computer as a text string.", 
      "type": "string", 
      "default": null
    }, 
    {
      "access": "item", 
      "name": "_sim_par_", 
      "description": "A honeybee Energy SimulationParameter object that describes all\nof the setting for the simulation. If None, some default simulation\nparameters will automatically be used.", 
      "type": "System.Object", 
      "default": null
    }, 
    {
      "access": "list", 
      "name": "measures_", 
      "description": "An optional list of measures to apply to the OpenStudio model\nupon export. Use the \"HB Load Measure\" component to load a measure\ninto Grasshopper and assign input arguments. Measures can be\ndownloaded from the NREL Building Components Library (BCL) at", 
      "type": "System.Object", 
      "default": null
    }, 
    {
      "access": "list", 
      "name": "add_str_", 
      "description": "THIS OPTION IS JUST FOR ADVANCED USERS OF ENERGYPLUS.\nYou can input additional text strings here that you would like\nwritten into the IDF.  The input here should be complete EnergyPlus\nobjects as a single string following the IDF format. This input can\nbe used to write objects into the IDF that are not currently supported\nby Honeybee.", 
      "type": "string", 
      "default": null
    }, 
    {
      "access": "item", 
      "name": "_folder_", 
      "description": "An optional folder on this computer, into which the IDF and result\nfiles will be written.", 
      "type": "string", 
      "default": null
    }, 
    {
      "access": "item", 
      "name": "_write", 
      "description": "Set to \"True\" to write out the honeybee JSONs (containing the Honeybee\nModel and Simulation Parameters) and write the OpenStudio Model file (OSM).\nThis process will also write either an EnergyPlus Input Data File (IDF)\nor an OpenStudio Workflow file (OSW), which can be used to run the\nmodel through EnergyPlus. Most models can be simulated with just\nand IDF and so no OWS will be written. However, an OSW will be used\nif any measures_ have been connected or if the simulation parameters\ncontain an efficiency standard.", 
      "type": "bool", 
      "default": null
    }, 
    {
      "access": "item", 
      "name": "run_", 
      "description": "Set to \"True\" to translate the Honeybee jsons to an OpenStudio Model\n(.osm) and EnergyPlus Input Data File (.idf) and then simulate the\n.idf in EnergyPlus. This will ensure that all result files appear\nin their respective outputs from this component.\n_\nThis input can also be the integer \"2\", which will run the whole translation\nand simulation silently (without any batch windows).", 
      "type": "int", 
      "default": null
    }
  ], 
  "subcategory": "5 :: Simulate", 
  "code": "\nimport os\nimport re\nimport json\nimport subprocess\n\ntry:\n    from ladybug.futil import preparedir, nukedir, copy_file_tree\n    from ladybug.epw import EPW\n    from ladybug.stat import STAT\nexcept ImportError as e:\n    raise ImportError('\\nFailed to import ladybug:\\n\\t{}'.format(e))\n\ntry:\n    from honeybee.config import folders\n    from honeybee.model import Model\nexcept ImportError as e:\n    raise ImportError('\\nFailed to import honeybee:\\n\\t{}'.format(e))\n\ntry:\n    from honeybee_energy.simulation.parameter import SimulationParameter\n    from honeybee_energy.measure import Measure\n    from honeybee_energy.run import to_openstudio_sim_folder, run_osw, run_idf, \\\n        output_energyplus_files, _parse_os_cli_failure\n    from honeybee_energy.result.err import Err\n    from honeybee_energy.config import folders as energy_folders\nexcept ImportError as e:\n    raise ImportError('\\nFailed to import honeybee_energy:\\n\\t{}'.format(e))\n\ntry:\n    from honeybee_openstudio.openstudio import OSModel\nexcept (ImportError, AssertionError):  # Openstudio C# bindings are not usable\n    OSModel = None\n\ntry:\n    from lbt_recipes.version import check_openstudio_version\nexcept ImportError as e:\n    raise ImportError('\\nFailed to import lbt_recipes:\\n\\t{}'.format(e))\n\ntry:\n    from ladybug_{{cad}}.{{plugin}} import all_required_inputs, give_warning\n    from ladybug_{{cad}}.config import units_system\nexcept ImportError as e:\n    raise ImportError('\\nFailed to import ladybug_{{cad}}:\\n\\t{}'.format(e))\n\nROOM_COUNT_THRESH = 1000  # threshold at which the CLI is used for translation\n\n\ndef measures_to_folder(measures, sim_folder):\n    osw_dict = {}  # dictionary that will be turned into the OSW JSON\n    osw_dict['steps'] = []\n    mea_folder = os.path.join(sim_folder, 'measures')\n    # ensure measures are correctly ordered\n    m_dict = {'ModelMeasure': [], 'EnergyPlusMeasure': [], 'ReportingMeasure': []}\n    for measure in measures:\n        assert isinstance(measure, Measure), 'Expected honeybee-energy Measure. ' \\\n            'Got {}.'.format(type(measure))\n        m_dict[measure.type].append(measure)\n    sorted_measures = m_dict['ModelMeasure'] + m_dict['EnergyPlusMeasure'] + \\\n        m_dict['ReportingMeasure']\n    # add the measures and the measure paths to the OSW\n    for measure in sorted_measures:\n        measure.validate()  # ensure that all required arguments have values\n        osw_dict['steps'].append(measure.to_osw_dict())  # add measure to workflow\n        dest_folder = os.path.join(mea_folder, os.path.basename(measure.folder))\n        copy_file_tree(measure.folder, dest_folder)\n        test_dir = os.path.join(dest_folder, 'tests')\n        if os.path.isdir(test_dir):\n            nukedir(test_dir, rmdir=True)\n    # write the dictionary to a workflow.osw\n    osw_json = os.path.join(mea_folder, 'workflow.osw')\n    try:\n        with open(osw_json, 'w') as fp:\n            json.dump(osw_dict, fp, indent=4)\n    except UnicodeDecodeError:  # non-unicode character in the dictionary\n        with open(osw_json, 'w') as fp:\n            json.dump(osw_dict, fp, indent=4, ensure_ascii=False)\n    return mea_folder\n\n\nif all_required_inputs(ghenv.Component) and _write:\n    # check the presence of openstudio and check that the version is compatible\n    check_openstudio_version()\n    assert isinstance(_model, Model), \\\n        'Expected Honeybee Model for _model input. Got {}.'.format(type(_model))\n\n    # process the simulation parameters\n    if _sim_par_ is None:\n        sim_par = SimulationParameter()\n        sim_par.output.add_zone_energy_use()\n        sim_par.output.add_hvac_energy_use()\n        sim_par.output.add_electricity_generation()\n    else:\n        sim_par = _sim_par_.duplicate()  # ensure input is not edited\n\n    # assign design days from the DDY next to the EPW if there are None\n    if len(sim_par.sizing_parameter.design_days) == 0:\n        msg = None\n        folder, epw_file_name = os.path.split(_epw_file)\n        ddy_file = os.path.join(folder, epw_file_name.replace('.epw', '.ddy'))\n        if os.path.isfile(ddy_file):\n            try:\n                sim_par.sizing_parameter.add_from_ddy_996_004(ddy_file)\n            except AssertionError:\n                pass\n            if len(sim_par.sizing_parameter.design_days) == 0:\n                msg = 'No ddy_file_ was input into the _sim_par_ sizing ' \\\n                    'parameters\\n and no design days were found in the .ddy file '\\\n                    'next to the _epw_file.'\n        else:\n             msg = 'No ddy_file_ was input into the _sim_par_ sizing parameters\\n' \\\n                'and no .ddy file was found next to the _epw_file.'\n        if msg is not None:\n            epw_obj = EPW(_epw_file)\n            des_days = [epw_obj.approximate_design_day('WinterDesignDay'),\n                        epw_obj.approximate_design_day('SummerDesignDay')]\n            sim_par.sizing_parameter.design_days = des_days\n            msg = msg + '\\nDesign days were generated from the input _epw_file but this ' \\\n                '\\nis not as accurate as design days from DDYs distributed with the EPW.'\n            give_warning(ghenv.Component, msg)\n            print(msg)\n    if sim_par.sizing_parameter.climate_zone is None:\n        stat_file = os.path.join(folder, epw_file_name.replace('.epw', '.stat'))\n        if os.path.isfile(stat_file):\n            stat_obj = STAT(stat_file)\n            sim_par.sizing_parameter.climate_zone = stat_obj.ashrae_climate_zone\n\n    # process the simulation folder name and the directory\n    _folder_ = folders.default_simulation_folder if _folder_ is None else _folder_\n    clean_name = re.sub(r'[^.A-Za-z0-9_-]', '_', _model.display_name)\n    directory = os.path.join(_folder_, clean_name, 'openstudio')\n\n    # delete any existing files in the directory and prepare it for simulation\n    nukedir(directory, True)\n    preparedir(directory)\n    sch_directory = os.path.join(directory, 'schedules')\n    preparedir(sch_directory)\n\n    # write the model and simulation parameter to JSONs\n    model_json = os.path.join(directory, '{}.hbjson'.format(clean_name))\n    with open(model_json, 'wb') as fp:\n        model_str = json.dumps(_model.to_dict(), ensure_ascii=False)\n        fp.write(model_str.encode('utf-8'))\n    sim_par_json = os.path.join(directory, 'simulation_parameter.json')\n    with open(sim_par_json, 'w') as fp:\n        json.dump(sim_par.to_dict(), fp)\n    jsons = [model_json, sim_par_json]\n\n    # determine whether to run the translation with cPython or IronPython\n    use_ironpython = False\n    if OSModel is not None:\n        vent_sim_control = _model.properties.energy.ventilation_simulation_control\n        if vent_sim_control.vent_control_type == 'SingleZone':\n            if len(_model.rooms) < ROOM_COUNT_THRESH:\n                osc_version = tuple(int(v) for v in OSModel().version().str().split('.'))\n                if osc_version == energy_folders.openstudio_version:\n                    use_ironpython = True\n\n    if use_ironpython:  # translate the model using IronPython methods\n        add_str = '\\n'.join(add_str_) if len(add_str_) != 0 and \\\n            add_str_[0] is not None else None\n        osm, osw, idf = to_openstudio_sim_folder(\n            _model, directory, epw_file=_epw_file, sim_par=sim_par,\n            schedule_directory=sch_directory, enforce_rooms=True,\n            additional_measures=measures_, strings_to_inject=add_str)\n        if run_ > 0:\n            silent = True if run_ > 1 else False\n            if idf is not None:  # run the IDF directly through E+\n                sql, zsz, rdd, html, err = run_idf(idf, _epw_file, silent=silent)\n            else:\n                osm, idf = run_osw(osw, measures_only=False, silent=silent)\n                if idf is None or not os.path.isfile(idf):\n                    _parse_os_cli_failure(directory)\n                sql, zsz, rdd, html, err = output_energyplus_files(os.path.dirname(idf))\n    else:  # translate the model with cPython using OpenStudio CLI\n        # write additional strings and measures to a folder\n        add_idf = None\n        if len(add_str_) != 0 and add_str_[0] is not None:\n            add_str = '\\n'.join(add_str_)\n            add_idf = os.path.join(directory, 'additional_strings.idf')\n            with open(add_idf, 'w') as fp:\n                fp.write(add_str)\n        measure_folder = None\n        if len(measures_) != 0 and measures_[0] is not None:\n            measure_folder = measures_to_folder(measures_, directory)\n\n        # put together the arguments for the command to be run\n        if run_ > 0:  # use the simulate command\n            cmds = ['\"{}\"'.format(folders.python_exe_path),\n                    '-m', 'honeybee_energy', 'simulate', 'model',\n                    '\"{}\"'.format(model_json), '\"{}\"'.format(_epw_file),\n                    '--sim-par-json', '\"{}\"'.format(sim_par_json),\n                    '--folder', '\"{}\"'.format(directory)]\n        else:  # use the translate command\n            cmds = ['\"{}\"'.format(folders.python_exe_path),\n                    '-m', 'honeybee_energy', 'translate', 'model-to-sim-folder',\n                    '\"{}\"'.format(model_json), '\"{}\"'.format(_epw_file),\n                    '--sim-par-json', '\"{}\"'.format(sim_par_json),\n                    '--folder', '\"{}\"'.format(directory)]\n        if add_idf is not None:\n            cmds.append('--additional-idf')\n            cmds.append('\"{}\"'.format(add_idf))\n        if measure_folder is not None:\n            cmds.append('--measures')\n            cmds.append('\"{}\"'.format(measure_folder))\n        osm = os.path.join(directory, 'in.osm')\n        idf = os.path.join(directory, 'run', 'in.idf')\n\n        # execute the command\n        custom_env = os.environ.copy()\n        custom_env['PYTHONHOME'] = ''\n        cmds = ' '.join(cmds)\n        if os.name == 'nt':\n            shell = False if run_ == 1 else True\n        else:\n            shell = True\n        process = subprocess.Popen(cmds, shell=shell, env=custom_env)\n        result = process.communicate()  # freeze the canvas while running\n\n        # check if any part of the translation failed\n        osw = os.path.join(directory, 'workflow.osw')\n        osw = osw if os.path.isfile(osw) else None\n        if not os.path.isfile(osm):\n            # get the error from stdout\n            process = subprocess.Popen(cmds, shell=shell, env=custom_env, stderr=subprocess.PIPE)\n            result = process.communicate()  # freeze the canvas while running\n            print(result[1])\n            raise ValueError('Failed to translate Model to OpenStudio.\\n{}'.format(\n                '\\n'.join(str(result[1]).split('\\n')[-3:])))\n        if run_ > 0:\n            if not os.path.isfile(idf):\n                cmds = ' '.join(cmds) if os.name == 'nt' else cmds\n                print(cmds)\n                raise ValueError('Failed to translate Model to EnergyPlus.')\n            sql, zsz, rdd, html, err = output_energyplus_files(os.path.dirname(idf))\n\n    # parse the error log and report any warnings\n    if run_ >= 1 and err is not None:\n        err_obj = Err(err)\n        print(err_obj.file_contents)\n        for warn in err_obj.severe_errors:\n            give_warning(ghenv.Component, warn)\n        for error in err_obj.fatal_errors:\n            raise Exception(error)\n", 
  "category": "HB-Energy", 
  "name": "HB Model to OSM", 
  "description": "Write a honeybee Model to an OSM file (OpenStudio Model), which can then be translated\nto an IDF file and then run through EnergyPlus.\n-"
}
{
  "version": "1.1.1", 
  "nickname": "ApplyLoadVals", 
  "outputs": [
    [
      {
        "access": "None", 
        "name": "mod_obj", 
        "description": "The input Rooms or ProgramTypes with their load values modified.", 
        "type": null, 
        "default": null
      }
    ]
  ], 
  "inputs": [
    {
      "access": "list", 
      "name": "_room_or_program", 
      "description": "Honeybee Rooms or ProgramType objects to which the input\nload objects should be assigned. This can also be the identifier of a\nProgramType to be looked up in the program type library.", 
      "type": "System.Object", 
      "default": null
    }, 
    {
      "access": "list", 
      "name": "people_per_floor_", 
      "description": "A numerical value for the number of people per square\nmeter of floor area.", 
      "type": "double", 
      "default": null
    }, 
    {
      "access": "list", 
      "name": "lighting_per_floor_", 
      "description": "A numerical value for the lighting power density in\nWatts per square meter of floor area.", 
      "type": "double", 
      "default": null
    }, 
    {
      "access": "list", 
      "name": "electric_per_floor_", 
      "description": "A numerical value for the electric equipment power density\nin Watts per square meter of floor area.", 
      "type": "double", 
      "default": null
    }, 
    {
      "access": "list", 
      "name": "gas_per_floor_", 
      "description": "A numerical value for the gas equipment power density in\nWatts per square meter of floor area.", 
      "type": "double", 
      "default": null
    }, 
    {
      "access": "list", 
      "name": "hot_wtr_per_floor_", 
      "description": "A numerical value for the total volume flow rate of water\nper unit area of floor in (L/h-m2).", 
      "type": "double", 
      "default": null
    }, 
    {
      "access": "list", 
      "name": "infilt_per_exterior_", 
      "description": "A numerical value for the intensity of infiltration\nin m3/s per square meter of exterior surface area. Typical values for\nthis property are as follows (note all values are at typical building\npressures of ~4 Pa):\n* 0.0001 (m3/s per m2 facade) - Tight building\n* 0.0003 (m3/s per m2 facade) - Average building\n* 0.0006 (m3/s per m2 facade) - Leaky building", 
      "type": "double", 
      "default": null
    }, 
    {
      "access": "list", 
      "name": "vent_per_floor_", 
      "description": "A numerical value for the intensity of ventilation in m3/s\nper square meter of floor area.", 
      "type": "double", 
      "default": null
    }, 
    {
      "access": "list", 
      "name": "vent_per_person_", 
      "description": "A numerical value for the intensity of ventilation\nin m3/s per person. Note that setting this value here does not mean\nthat ventilation is varied based on real-time occupancy but rather\nthat the design level of ventilation is determined using this value\nand the People object of the zone. To vary ventilation in real time,\nthe ventilation schedule should be used. Most ventilation standards\nsupport that a value of 0.01 m3/s (10 L/s or ~20 cfm) per person is\nsufficient to remove odors. Accordingly, setting this value to 0.01\nand using 0 for the following ventilation terms will often be suitable\nfor many applications.", 
      "type": "double", 
      "default": null
    }
  ], 
  "subcategory": "3 :: Loads", 
  "code": "\nimport uuid\n\ntry:\n    from honeybee.room import Room\nexcept ImportError as e:\n    raise ImportError('\\nFailed to import honeybee:\\n\\t{}'.format(e))\n\ntry:\n    from honeybee_energy.load.people import People\n    from honeybee_energy.load.lighting import Lighting\n    from honeybee_energy.load.equipment import ElectricEquipment, GasEquipment\n    from honeybee_energy.load.hotwater import ServiceHotWater\n    from honeybee_energy.load.infiltration import Infiltration\n    from honeybee_energy.load.ventilation import Ventilation\n    from honeybee_energy.lib.schedules import schedule_by_identifier\n    from honeybee_energy.lib.programtypes import program_type_by_identifier\n    from honeybee_energy.programtype import ProgramType\nexcept ImportError as e:\n    raise ImportError('\\nFailed to import honeybee_energy:\\n\\t{}'.format(e))\ntry:\n    from ladybug_{{cad}}.{{plugin}} import all_required_inputs, longest_list\nexcept ImportError as e:\n    raise ImportError('\\nFailed to import ladybug_{{cad}}:\\n\\t{}'.format(e))\n\n\n# get the always on schedule\nalways_on = schedule_by_identifier('Always On')\n\n\ndef dup_load(hb_obj, object_name, object_class):\n    \"\"\"Duplicate a load object assigned to a Room or ProgramType.\"\"\"\n    # try to get the load object assgined to the Room or ProgramType\n    try:  # assume it's a Room\n        load_obj = hb_obj.properties\n        for attribute in ('energy', object_name):\n            load_obj = getattr(load_obj, attribute)\n    except AttributeError:  # it's a ProgramType\n        load_obj = getattr(hb_obj, object_name)\n\n    load_id = '{}_{}'.format(hb_obj.identifier, object_name)\n    try:  # duplicate the load object\n        dup_load = load_obj.duplicate()\n        dup_load.identifier = load_id\n        return dup_load\n    except AttributeError:  # create a new object\n        try:  # assume it's People, Lighting, Equipment or Infiltration\n            return object_class(load_id, 0, always_on)\n        except:  # it's a Ventilation object\n            return object_class(load_id)\n\n\ndef assign_load(hb_obj, load_obj, object_name):\n    \"\"\"Assign a load object to a Room or a ProgramType.\"\"\"\n    try:  # assume it's a Room\n        setattr(hb_obj.properties.energy, object_name, load_obj)\n    except AttributeError:  # it's a ProgramType\n        setattr(hb_obj, object_name, load_obj)\n\n\ndef duplicate_and_id_program(program):\n    \"\"\"Duplicate a program and give it a new unique ID.\"\"\"\n    new_prog = program.duplicate()\n    new_prog.identifier = '{}_{}'.format(program.identifier, str(uuid.uuid4())[:8])\n    return new_prog\n\n\nif all_required_inputs(ghenv.Component):\n    # duplicate the initial objects\n    mod_obj = []\n    for obj in _room_or_program:\n        if isinstance(obj, Room):\n            mod_obj.append(obj.duplicate())\n        elif isinstance(obj, ProgramType):\n            mod_obj.append(duplicate_and_id_program(obj))\n        elif isinstance(obj, str):\n            program = program_type_by_identifier(obj)\n            mod_obj.append(duplicate_and_id_program(program))\n        else:\n            raise TypeError('Expected Honeybee Room or ProgramType. '\n                            'Got {}.'.format(type(obj)))\n\n    # assign the people_per_floor_\n    if len(people_per_floor_) != 0:\n        for i, obj in enumerate(mod_obj):\n            people = dup_load(obj, 'people', People)\n            people.people_per_area = longest_list(people_per_floor_, i)\n            assign_load(obj, people, 'people')\n\n    # assign the lighting_per_floor_\n    if len(lighting_per_floor_) != 0:\n        for i, obj in enumerate(mod_obj):\n            lighting = dup_load(obj, 'lighting', Lighting)\n            lighting.watts_per_area = longest_list(lighting_per_floor_, i)\n            assign_load(obj, lighting, 'lighting')\n\n    # assign the electric_per_floor_\n    if len(electric_per_floor_) != 0:\n        for i, obj in enumerate(mod_obj):\n            equip = dup_load(obj, 'electric_equipment', ElectricEquipment)\n            equip.watts_per_area = longest_list(electric_per_floor_, i)\n            assign_load(obj, equip, 'electric_equipment')\n\n    # assign the gas_per_floor_\n    if len(gas_per_floor_) != 0:\n        for i, obj in enumerate(mod_obj):\n            equip = dup_load(obj, 'gas_equipment', GasEquipment)\n            equip.watts_per_area = longest_list(gas_per_floor_, i)\n            assign_load(obj, equip, 'gas_equipment')\n\n    # assign the hot_wtr_per_floor_\n    if len(hot_wtr_per_floor_) != 0:\n        for i, obj in enumerate(mod_obj):\n            shw = dup_load(obj, 'service_hot_water', ServiceHotWater)\n            shw.flow_per_area = longest_list(hot_wtr_per_floor_, i)\n            assign_load(obj, shw, 'service_hot_water')\n\n    # assign the infilt_per_exterior_\n    if len(infilt_per_exterior_) != 0:\n        for i, obj in enumerate(mod_obj):\n            infilt = dup_load(obj, 'infiltration', Infiltration)\n            infilt.flow_per_exterior_area = longest_list(infilt_per_exterior_, i)\n            assign_load(obj, infilt, 'infiltration')\n\n    # assign the vent_per_floor_\n    if len(vent_per_floor_) != 0:\n        for i, obj in enumerate(mod_obj):\n            vent = dup_load(obj, 'ventilation', Ventilation)\n            vent.flow_per_area = longest_list(vent_per_floor_, i)\n            assign_load(obj, vent, 'ventilation')\n\n    # assign the vent_per_person_\n    if len(vent_per_person_) != 0:\n        for i, obj in enumerate(mod_obj):\n            vent = dup_load(obj, 'ventilation', Ventilation)\n            vent.flow_per_person = longest_list(vent_per_person_, i)\n            assign_load(obj, vent, 'ventilation')\n", 
  "category": "HB-Energy", 
  "name": "HB Apply Load Values", 
  "description": "Apply load values to a Room or ProgramType.\n_\nThis component will not edit any of the schedule objects associated with each load\nvalue. If no schedule currently exists to describe how the load varies over the\nsimulation, the \"Always On\" schedule will be used as a default.\n-"
}
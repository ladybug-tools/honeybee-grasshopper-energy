{
  "version": "1.1.0", 
  "nickname": "ExteriorSubset", 
  "outputs": [
    [
      {
        "access": "None", 
        "name": "exterior_set", 
        "description": "A list of exterior constructions that can be used to edit\nor create a ConstructionSet object.", 
        "type": null, 
        "default": null
      }
    ]
  ], 
  "inputs": [
    {
      "access": "item", 
      "name": "_exterior_wall_", 
      "description": "A construction object for exterior walls (or text for\nthe identifier of the construction within the library).", 
      "type": "System.Object", 
      "default": null
    }, 
    {
      "access": "item", 
      "name": "_exterior_roof_", 
      "description": "A construction object for exterior roofs (or text for\nthe identifier of the construction within the library).", 
      "type": "System.Object", 
      "default": null
    }, 
    {
      "access": "item", 
      "name": "_exposed_floor_", 
      "description": "A construction object for exposed floors (or text for\nthe identifier of the construction within the library).", 
      "type": "System.Object", 
      "default": null
    }
  ], 
  "subcategory": "0 :: Basic Properties", 
  "code": "\ntry:  # import honeybee_energy dependencies\n    from honeybee_energy.construction.opaque import OpaqueConstruction\n    from honeybee_energy.lib.constructions import opaque_construction_by_identifier\nexcept ImportError as e:\n    raise ImportError('\\nFailed to import honeybee_energy:\\n\\t{}'.format(e))\n\n\ndef opaque_constr(construction, input_name):\n    \"\"\"Get an OpaqueConstrucion from the library if it's a string.\"\"\"\n    if isinstance(construction, str):\n        return opaque_construction_by_identifier(construction)\n    else:\n        assert isinstance(construction, OpaqueConstruction), \\\n            'Expected OpaqueConstruction for {}. Got {}'.format(\n                input_name, type(construction))\n    return construction\n\n\n# go through each input construction\nif _exterior_wall_ is not None:\n    _exterior_wall_ = opaque_constr(_exterior_wall_, '_exterior_wall_')\nif _exterior_roof_ is not None:\n    _exterior_roof_ = opaque_constr(_exterior_roof_, '_exterior_roof_')\nif _exposed_floor_ is not None:\n    _exposed_floor_ = opaque_constr(_exposed_floor_, '_exposed_floor_')\n\n\n# return the final list from the component\nexterior_set = [_exterior_wall_, _exterior_roof_, _exposed_floor_]\n", 
  "category": "HB-Energy", 
  "name": "HB Exterior Construction Subset", 
  "description": "Create a list of exterior constructions that can be used to edit or create a\nConstructionSet object.\n-"
}
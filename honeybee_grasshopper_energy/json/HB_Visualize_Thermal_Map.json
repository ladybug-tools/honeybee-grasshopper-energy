{
  "version": "1.2.0", 
  "nickname": "VizThermalMap", 
  "outputs": [
    [
      {
        "access": "None", 
        "name": "mesh", 
        "description": "The input mesh objects colored with results.", 
        "type": null, 
        "default": null
      }, 
      {
        "access": "None", 
        "name": "legend", 
        "description": "Geometry representing the legend for the results.", 
        "type": null, 
        "default": null
      }, 
      {
        "access": "None", 
        "name": "title", 
        "description": "A text object for the title.", 
        "type": null, 
        "default": null
      }, 
      {
        "access": "None", 
        "name": "colors", 
        "description": "The colors associated with each input value.", 
        "type": null, 
        "default": null
      }, 
      {
        "access": "None", 
        "name": "values", 
        "description": "A list of numbers for each face of the mesh, which are used to\ngenerate the colors.", 
        "type": null, 
        "default": null
      }
    ]
  ], 
  "inputs": [
    {
      "access": "item", 
      "name": "_comf_mtx", 
      "description": "A comfort Matrix object from the \"HB Read Thermal Matrix\" component.", 
      "type": "System.Object", 
      "default": null
    }, 
    {
      "access": "list", 
      "name": "_mesh", 
      "description": "Mesh objects that correspond with the sensor grids of the thermal map\nanalysis. These will be , with a number of faces or vertices that match\nthe number of input values and will be colored with results.", 
      "type": "Mesh", 
      "default": null
    }, 
    {
      "access": "item", 
      "name": "sim_step_", 
      "description": "An optional integer (greater than or equal to 0) to select a\nspecific time step of the comfort results to be displayed. Note\nthat this will override any connected period.", 
      "type": "int", 
      "default": null
    }, 
    {
      "access": "item", 
      "name": "period_", 
      "description": "A Ladybug analysis period to be applied to select a slice of time\nacross the comfort results to be displayed.", 
      "type": "System.Object", 
      "default": null
    }, 
    {
      "access": "item", 
      "name": "legend_par_", 
      "description": "An optional LegendParameter object to change the display\nof the results.", 
      "type": "System.Object", 
      "default": null
    }
  ], 
  "subcategory": "7 :: Thermal Map", 
  "code": "\ntry:\n    from ladybug_geometry.geometry3d.mesh import Mesh3D\nexcept ImportError as e:\n    raise ImportError('\\nFailed to import ladybug_geometry:\\n\\t{}'.format(e))\n\ntry:\n    from ladybug.graphic import GraphicContainer\n    from ladybug.legend import LegendParameters\n    from ladybug.color import Colorset\n    from ladybug.datatype.temperature import Temperature\n    from ladybug.datatype.temperaturedelta import TemperatureDelta\nexcept ImportError as e:\n    raise ImportError('\\nFailed to import ladybug:\\n\\t{}'.format(e))\n\ntry:\n    from ladybug_{{cad}}.togeometry import to_mesh3d\n    from ladybug_{{cad}}.fromgeometry import from_mesh3d\n    from ladybug_{{cad}}.fromobjects import legend_objects\n    from ladybug_{{cad}}.text import text_objects\n    from ladybug_{{cad}}.color import color_to_color\n    from ladybug_{{cad}}.{{plugin}} import all_required_inputs, de_objectify_output\nexcept ImportError as e:\n    raise ImportError('\\nFailed to import ladybug_{{cad}}:\\n\\t{}'.format(e))\n\n\ndef colors_from_data_type(data_type):\n    \"\"\"Get the list of colors that should be used by default for a given data type.\n\n    Args:\n        data_type: A data type object that will be used to determine default colors.\n    \"\"\"\n    if isinstance(data_type, Temperature):\n        return Colorset.original()\n    else:  # it is some type of thermal condition or delta temperature\n        return Colorset.thermal_comfort()\n\n\nif all_required_inputs(ghenv.Component):\n    # load the data and perform and time-slicing operations on it\n    data_mtx = de_objectify_output(_comf_mtx)\n    header = data_mtx[0][0].header\n    if sim_step_ is not None:\n        values = [data[sim_step_] for data_list in data_mtx for data in data_list]\n        time_text = data_mtx[0][0].datetimes[sim_step_]\n    elif period_ is not None:\n        new_data = [[data.filter_by_analysis_period(period_) for data in data_list]\n                     for data_list in data_mtx]\n        values = [data.average for data_list in new_data for data in data_list]\n        time_text = period_\n    else:\n        values = [data.average for data_list in data_mtx for data in data_list]\n        time_text = header.analysis_period\n\n    # generate Ladybug objects for the graphic\n    lb_meshes = [to_mesh3d(mesh) for mesh in _mesh]\n    lb_mesh = Mesh3D.join_meshes(lb_meshes)\n    graphic = GraphicContainer(\n        values, lb_mesh.min, lb_mesh.max, legend_par_,\n        data_type=header.data_type, unit=header.unit\n    )\n\n    # set titles and set default colors and color ranges\n    if graphic.legend_parameters.are_colors_default:\n        graphic.legend_parameters.colors = colors_from_data_type(header.data_type)\n    if isinstance(header.data_type, TemperatureDelta) and graphic.legend.is_min_default \\\n            and graphic.legend.is_max_default:\n        graphic.legend_parameters.min = -5\n        graphic.legend_parameters.max = 5\n    graphic.legend_parameters.title = header.unit\n    global_title = '{}\\n{}'.format(header.data_type.name, time_text)\n    title = text_objects(global_title, graphic.lower_title_location,\n                         graphic.legend_parameters.text_height * 1.5,\n                         graphic.legend_parameters.font)\n\n    # draw {{cad}} objects\n    lb_mesh.colors = graphic.value_colors\n    mesh = from_mesh3d(lb_mesh)\n    legend = legend_objects(graphic.legend)\n    colors = [color_to_color(col) for col in lb_mesh.colors]\n", 
  "category": "HB-Energy", 
  "name": "HB Visualize Thermal Map", 
  "description": "Spatially visualize the detailed results of a thermal mapping analysis from a\ncomfort matrix.\n-"
}
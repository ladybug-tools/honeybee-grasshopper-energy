{
  "version": "0.1.0", 
  "nickname": "NormByFlr", 
  "outputs": [
    [
      {
        "access": "None", 
        "name": "total_data", 
        "description": "The total results normalized by the floor area of all connected\nrooms. This accounts for the fact that some rooms have more floor\narea (or have a multiplier) and therefore get a greater weighting.", 
        "type": null, 
        "default": null
      }, 
      {
        "access": "None", 
        "name": "room_data", 
        "description": "The results normalized by the floor area of each individual room.", 
        "type": null, 
        "default": null
      }
    ]
  ], 
  "inputs": [
    {
      "access": "list", 
      "name": "_data", 
      "description": "A list of HourlyContinuousCollections of the same data type, which\nwill be normalized by room floor area. Data collections can be of any class\n(eg. MonthlyCollection, DailyCollection) but they should originate\nfrom an energy simulation sql (with header metadata that has 'Zone' or\n'System' keys). These keys will be used to match the data in the collections\nto the input rooms.", 
      "type": "System.Object", 
      "default": null
    }, 
    {
      "access": "list", 
      "name": "_model", 
      "description": "An array of honeybee Rooms or a honeybee Model, which will\nbe matched to the data collections. The length of these Rooms does\nnot have to match the data collections and this object will only\noutput collections for rooms that are found to be matching.", 
      "type": "System.Object", 
      "default": null
    }
  ], 
  "subcategory": "6 :: Result", 
  "code": "\ntry:\n    from ladybug.header import Header\n    from ladybug.datacollection import HourlyContinuousCollection\nexcept ImportError as e:\n    raise ImportError('\\nFailed to import ladybug:\\n\\t{}'.format(e))\n\ntry:\n    from honeybee.model import Model\nexcept ImportError as e:\n    raise ImportError('\\nFailed to import honeybee:\\n\\t{}'.format(e))\n\ntry:\n    from honeybee_energy.result.match import match_rooms_to_data\nexcept ImportError as e:\n    raise ImportError('\\nFailed to import honeybee_energy:\\n\\t{}'.format(e))\n\ntry:\n    from ladybug_{{cad}}.{{plugin}} import all_required_inputs\n    from ladybug_{{cad}}.config import conversion_to_meters\nexcept ImportError as e:\n    raise ImportError('\\nFailed to import ladybug_{{cad}}:\\n\\t{}'.format(e))\n\n\nif all_required_inputs(ghenv.Component):\n    # check that the input data is normalizable\n    for dat in _data:\n        norm_type_class = dat.header.data_type.normalized_type\n        assert norm_type_class is not None, \\\n            'Data type \"{}\" cannot be normalized by area to yield a useful '\\\n            'metric.'.format(dat.header.data_type)\n    norm_type = norm_type_class()  # get a class instance\n\n    # extract any rooms from input Models and convert geo to meters if necessary\n    rooms = []\n    for hb_obj in _model:\n        if isinstance(hb_obj, Model):\n            rooms.extend(hb_obj.rooms)\n        else:\n            rooms.append(hb_obj)\n    m_convert = conversion_to_meters()\n    if m_convert != 1:\n        rooms = [room.duplicate() for room in rooms]  # avoid editing the input\n        rooms = [room.scale(m_convert) for room in rooms]\n\n    # match the data with the rooms\n    match_tups = match_rooms_to_data(_data, rooms)\n\n    # divide the individual data collections by floor area\n    total_area = 0\n    room_data = []\n    for tup in match_tups:\n        total_flr_area = tup[0].floor_area * tup[2]  # includes effect of multiplier\n        try:\n            new_vals = [val / total_flr_area for val in tup[1]]\n            total_area += total_flr_area\n            head = tup[1].header\n            new_meta = head.metadata.copy()\n            new_meta['type'] = '{} {}'.format(new_meta['type'], 'Intensity')\n            new_head = Header(norm_type, norm_type.units[0], head.analysis_period, new_meta)\n            if isinstance(tup[1], HourlyContinuousCollection):\n                room_data.append(HourlyContinuousCollection(new_head, new_vals))\n            else:\n                room_data.append(tup[1].__class__(new_head, new_vals, tup[1].datetimes))\n        except ZeroDivisionError:  # no floor area; not normalizable\n            pass\n\n    # sum all collections together and normalize them by the total\n    if len(match_tups) != 0:\n        summed_vals = [val for val in match_tups[0][1]]\n        for data_i in match_tups[1:]:\n            for i, val in enumerate(data_i[1]):\n                summed_vals[i] += val\n        try:\n            tot_vals = [val / total_area for val in summed_vals]\n            tot_head = new_head.duplicate()\n            tot_head._metadata = {'type': tot_head.metadata['type']}\n            if isinstance(match_tups[0][1], HourlyContinuousCollection):\n                total_data = HourlyContinuousCollection(tot_head, tot_vals)\n            else:\n                total_data = match_tups[0][1].__class__(\n                    tot_head, tot_vals, match_tups[0][1].datetimes)\n        except ZeroDivisionError:  # no floor area; not normalizable\n            pass\n", 
  "category": "HB-Energy", 
  "name": "HB Normalize by Floor Area", 
  "description": "Normalize Zone-level data collections from an energy simulation by the by the\nfloor area of the corresponding honeybee Rooms.\n-"
}
{
  "version": "1.1.0", 
  "nickname": "EUI", 
  "outputs": [
    [
      {
        "access": "None", 
        "name": "eui", 
        "description": "The total end use intensity result from the simulation. Specifically,\nthis is the sum of all electricity, fuel, district heating/cooling,\netc. divided by the gross floor area (including both conditioned\nand unconditioned spaces). The value will be in kWh/m2 if ip_\nis False or None and kBtu/ft2 if True.", 
        "type": null, 
        "default": null
      }, 
      {
        "access": "None", 
        "name": "eui_end_use", 
        "description": "The end use intensity result from the simulation, broken down by each\nend use. These values coorespond to the end_uses output below. Values\nwill be in kWh/m2 if ip_ is False or None and kBtu/ft2 if True.", 
        "type": null, 
        "default": null
      }, 
      {
        "access": "None", 
        "name": "end_uses", 
        "description": "A list of text for each of the end uses in the simulation (Heating,\nCooling, etc.). Thes outputs coorespond to the eui_end_use\noutput above.", 
        "type": null, 
        "default": null
      }, 
      {
        "access": "None", 
        "name": "gross_floor", 
        "description": "The total gross floor area of the energy model. This can be used\nto compute the total energy use from the intensity values above or\nit can be used to help with other result post-processing. The value\nwill be in m2 if ip_ is False or None and ft2 if True.", 
        "type": null, 
        "default": null
      }
    ]
  ], 
  "inputs": [
    {
      "access": "list", 
      "name": "_sql", 
      "description": "The file path of the SQL result file that has been generated from\nan energy simulation. This can also be a list of EnergyPlus files\nin which case, EUI will be computed across all files.", 
      "type": "string", 
      "default": null
    }, 
    {
      "access": "item", 
      "name": "ip_", 
      "description": "Boolean to note whether the EUI should be in SI (kWh/m2) or IP\n(kBtu/ft2) units. (Default: False).", 
      "type": "bool", 
      "default": null
    }
  ], 
  "subcategory": "6 :: Result", 
  "code": "\nfrom collections import OrderedDict\n\ntry:\n    from ladybug.sql import SQLiteResult\n    from ladybug.datatype.area import Area\n    from ladybug.datatype.energyintensity import EnergyIntensity\n    from ladybug.datatype.energy import Energy\nexcept ImportError as e:\n    raise ImportError('\\nFailed to import ladybug:\\n\\t{}'.format(e))\n\ntry:\n    from ladybug_{{cad}}.{{plugin}} import all_required_inputs\nexcept ImportError as e:\n    raise ImportError('\\nFailed to import ladybug_{{cad}}:\\n\\t{}'.format(e))\n\n\nif all_required_inputs(ghenv.Component):\n    # set initial values that will be computed based on results\n    total_floor_area, total_energy = 0, 0\n    all_uses = \\\n        ('heating', 'cooling', 'interior_lighting', 'exterior_lighting',\n         'interior_equipment', 'exterior_equipment', 'fans', 'pumps',\n         'heat_rejection', 'humidification', 'heat_recovery', 'water_systems',\n          'refrigeration', 'generators')\n    end_uses = OrderedDict()\n    for use in all_uses:\n        end_uses[use] = 0\n\n    # loop through the sql files in the directory and add the energy use\n    for result_file in _sql:\n        # parse the SQL file\n        sql_obj = SQLiteResult(result_file)\n        # get the total floor area of the model\n        area_dict = sql_obj.tabular_data_by_name('Building Area')\n        areas = tuple(area_dict.values())\n        total_floor_area += areas[0][0]\n        # get the energy use\n        eui_dict = sql_obj.tabular_data_by_name('End Uses')\n        euis = tuple(eui_dict.values())\n        total_energy += sum([val for val in euis[-2][:12]])\n        end_uses['heating'] += sum([val for val in euis[0][:12]])\n        end_uses['cooling'] += sum([val for val in euis[1][:12]])\n        end_uses['interior_lighting'] += sum([val for val in euis[2][:12]])\n        end_uses['exterior_lighting'] += sum([val for val in euis[3][:12]])\n        end_uses['interior_equipment'] += sum([val for val in euis[4][:12]])\n        end_uses['exterior_equipment'] += sum([val for val in euis[5][:12]])\n        end_uses['fans'] += sum([val for val in euis[6][:12]])\n        end_uses['pumps'] += sum([val for val in euis[7][:12]])\n        end_uses['heat_rejection'] += sum([val for val in euis[8][:12]])\n        end_uses['humidification'] += sum([val for val in euis[9][:12]])\n        end_uses['heat_recovery'] += sum([val for val in euis[10][:12]])\n        end_uses['water_systems'] += sum([val for val in euis[11][:12]])\n        end_uses['refrigeration'] += sum([val for val in euis[12][:12]])\n        end_uses['generators'] += sum([val for val in euis[13][:12]])\n\n    # assemble all of the results into a final dictionary\n    eui = round(total_energy / total_floor_area, 3)\n    gross_floor = round(total_floor_area, 3)\n    end_use_pairs = [(key, round(val / total_floor_area, 3))\n                     for key, val in end_uses.items() if val != 0]\n    eui_end_use = [use[1] for use in end_use_pairs]\n    end_uses = [use[0].replace('_', ' ').title() for use in end_use_pairs]\n\n    # convert data to IP if requested\n    if ip_:\n        eui_typ, a_typ, e_typ = EnergyIntensity(), Area(), Energy()\n        eui = round(eui_typ.to_ip([eui], 'kWh/m2')[0][0], 3)\n        gross_floor = round(a_typ.to_ip([gross_floor], 'm2')[0][0], 3)\n        eui_end_use = [round(eui_typ.to_ip([val], 'kWh/m2')[0][0], 3)\n                       for val in eui_end_use]\n", 
  "category": "HB-Energy", 
  "name": "HB End Use Intensity", 
  "description": "Get information about end use intensity from an EnergyPlus SQL file.\n-"
}
{
  "version": "1.2.2", 
  "nickname": "DecnstrMat", 
  "outputs": [
    [
      {
        "access": "None", 
        "name": "values", 
        "description": "List of values for the attributes that define the material.", 
        "type": null, 
        "default": null
      }, 
      {
        "access": "None", 
        "name": "attr_names", 
        "description": "List of text that is the same length as the values, which\nnotes the attribute name for each value.", 
        "type": null, 
        "default": null
      }, 
      {
        "access": "None", 
        "name": "r_val_si", 
        "description": "R-value of the material in m2-K/W. Note that R-values do NOT\ninclude the resistance of air films on either side of the material.", 
        "type": null, 
        "default": null
      }, 
      {
        "access": "None", 
        "name": "r_val_ip", 
        "description": "R-value of the material in h-ft2-F/Btu. Note that R-values do NOT\ninclude the resistance of air films on either side of the material.", 
        "type": null, 
        "default": null
      }
    ]
  ], 
  "inputs": [
    {
      "access": "item", 
      "name": "_mat", 
      "description": "A material to be deconstructed. This can also be text for a\nmaterial to be looked up in the material library.", 
      "type": "System.Object", 
      "default": null
    }
  ], 
  "subcategory": "1 :: Constructions", 
  "code": "\nimport re\n\ntry:  # import the honeybee-energy dependencies\n    from honeybee_energy.reader import parse_idf_string\n    from honeybee_energy.lib.materials import opaque_material_by_identifier\n    from honeybee_energy.lib.materials import window_material_by_identifier\nexcept ImportError as e:\n    raise ImportError('\\nFailed to import honeybee_energy:\\n\\t{}'.format(e))\ntry:  # import ladybug_{{cad}} dependencies\n    from ladybug_{{cad}}.{{plugin}} import all_required_inputs, give_warning\nexcept ImportError as e:\n    raise ImportError('\\nFailed to import ladybug_{{cad}}:\\n\\t{}'.format(e))\ntry:\n    from ladybug.datatype.rvalue import RValue\n    from ladybug.datatype.uvalue import UValue\nexcept ImportError as e:\n    raise ImportError('\\nFailed to import ladybug:\\n\\t{}'.format(e))\n\n\nif all_required_inputs(ghenv.Component):\n    # check the input\n    if isinstance(_mat, str):\n        try:\n            _mat = opaque_material_by_identifier(_mat)\n        except ValueError:\n            _mat = window_material_by_identifier(_mat)\n\n    # get the values and attribute names\n    mat_str = str(_mat)\n    values = parse_idf_string(mat_str)\n    attr_name_pattern1 = re.compile(r'!- (.*)\\n')\n    attr_name_pattern2 = re.compile(r'!- (.*)$')\n    attr_names = attr_name_pattern1.findall(mat_str) + \\\n        attr_name_pattern2.findall(mat_str)\n\n    # get the r-value\n    try:\n        r_val_si = _mat.r_value\n        r_val_ip = RValue().to_ip([r_val_si], 'm2-K/W')[0][0]\n\n        # give a warning if there's a negative R-value for a vertical surface\n        if r_val_si <= 0:\n            msg = 'Material \"{}\" has an overall R-value that is less than the\\n' \\\n                'resistance of vertically-oriented air films. This indicates that the ' \\\n                'construction is only suitable for horizontal/skylight geometry.'.format(\n                    _mat.display_name)\n            print(msg)\n            give_warning(ghenv.Component, msg)\n    except AttributeError:\n        r_val_si = 'varies'\n        r_val_ip = 'varies'\n\n    # re-order the E+ attributes of opaque constructions to align with component\n    if len(attr_names) == 9:\n        values.insert(5, values.pop(1))\n        attr_names.insert(5, attr_names.pop(1))\n", 
  "category": "HB-Energy", 
  "name": "HB Deconstruct Material", 
  "description": "Deconstruct a material into its constituient attributes and values.\n-"
}
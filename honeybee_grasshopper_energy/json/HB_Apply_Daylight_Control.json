{
  "version": "1.2.1", 
  "nickname": "DaylightControl", 
  "outputs": [
    [
      {
        "access": "None", 
        "name": "rooms", 
        "description": "The input Rooms with simple daylight controls assigned to them.", 
        "type": null, 
        "default": null
      }
    ]
  ], 
  "inputs": [
    {
      "access": "list", 
      "name": "_rooms", 
      "description": "Honeybee Rooms to which simple daylight controls should be assigned.", 
      "type": "System.Object", 
      "default": null
    }, 
    {
      "access": "list", 
      "name": "_sensor_points_", 
      "description": "A list of point objects that align with the input _rooms and\nassign the position of the daylight sensor within the Room.\nThis point should lie within the Room volume and a warning will\nbe thrown and no daylight controls assigned for any point that\nlies outside the corresponding room. If unspecified, the\nsensor will be assigned to the center of the room at 0.8 meters\nabove the floor. Note that such a center point might lie outside\nrooms that are significantly concave and no daylight controls\nwill be assigned to these rooms in this case.", 
      "type": "Point3d", 
      "default": null
    }, 
    {
      "access": "list", 
      "name": "_ill_setpoint_", 
      "description": "A number for the illuminance setpoint in lux beyond which\nelectric lights are dimmed if there is sufficient daylight.\nSome common setpoints are listed below. (Default: 300 lux).\n-\n50 lux - Corridors and hallways.\n150 lux - Computer work spaces (screens provide illumination).\n300 lux - Paper work spaces (reading from surfaces that need illumination).\n500 lux - Retail spaces or museums illuminating merchandise/artifacts.\n1000 lux - Operating rooms and workshops where light is needed for safety.", 
      "type": "double", 
      "default": null
    }, 
    {
      "access": "list", 
      "name": "_control_fract_", 
      "description": "A number between 0 and 1 that represents the fraction of\nthe Room lights that are dimmed when the illuminance at the sensor\nposition is at the specified illuminance. 1 indicates that all lights are\ndim-able while 0 indicates that no lights are dim-able. Deeper rooms\nshould have lower control fractions to account for the face that the\nlights in the back of the space do not dim in response to suitable\ndaylight at the front of the room. (Default: 1).", 
      "type": "double", 
      "default": null
    }, 
    {
      "access": "list", 
      "name": "_min_power_in_", 
      "description": "A number between 0 and 1 for the the lowest power the lighting\nsystem can dim down to, expressed as a fraction of maximum\ninput power. (Default: 0.3).", 
      "type": "double", 
      "default": null
    }, 
    {
      "access": "list", 
      "name": "_min_light_out_", 
      "description": "A number between 0 and 1 the lowest lighting output the lighting\nsystem can dim down to, expressed as a fraction of maximum\nlight output. (Default: 0.2).", 
      "type": "double", 
      "default": null
    }, 
    {
      "access": "list", 
      "name": "off_at_min_", 
      "description": "Boolean to note whether lights should switch off completely when\nthey get to the minimum power input. (Default: False).", 
      "type": "bool", 
      "default": null
    }
  ], 
  "subcategory": "3 :: Loads", 
  "code": "\ntry:  # import the honeybee-energy extension\n    from honeybee_energy.load.daylight import DaylightingControl\nexcept ImportError as e:\n    raise ImportError('\\nFailed to import honeybee_energy:\\n\\t{}'.format(e))\n\ntry:\n    from ladybug_{{cad}}.togeometry import to_point3d\n    from ladybug_{{cad}}.config import conversion_to_meters\n    from ladybug_{{cad}}.{{plugin}} import all_required_inputs, longest_list, \\\n        give_warning\nexcept ImportError as e:\n    raise ImportError('\\nFailed to import ladybug_{{cad}}:\\n\\t{}'.format(e))\n\n\nif all_required_inputs(ghenv.Component):\n    # duplicate the initial objects\n    rooms = [room.duplicate() for room in _rooms]\n\n    # set default values and perform checks\n    dist_from_floor = 0.8 / conversion_to_meters()\n    if len(_sensor_points_) != 0:\n        assert len(_sensor_points_) == len(_rooms), 'Number of sensor points ({}) ' \\\n            'must align exactly with the number of rooms ({}).'.format(\n                len(_sensor_points_), len(_rooms))\n    _ill_setpoint_ = [300] if len(_ill_setpoint_) == 0 else _ill_setpoint_\n    _control_fract_ = [1] if len(_control_fract_) == 0 else _control_fract_\n    _min_power_in_ = [0.3] if len(_min_power_in_) == 0 else _min_power_in_\n    _min_light_out_ = [0.2] if len(_min_light_out_) == 0 else _min_light_out_\n    off_at_min_ = [False] if len(off_at_min_) == 0 else off_at_min_\n\n    # loop through the rooms and assign daylight sensors\n    unassigned_rooms = []\n    if len(_sensor_points_) == 0:\n        for i, room in enumerate(rooms):\n            dl_control = room.properties.energy.add_daylight_control_to_center(\n                dist_from_floor, longest_list(_ill_setpoint_, i),\n                longest_list(_control_fract_, i), longest_list(_min_power_in_, i),\n                longest_list(_min_light_out_, i), longest_list(off_at_min_, i))\n            if dl_control is None:\n                unassigned_rooms.append(room.display_name)\n    else:\n        for i, room in enumerate(rooms):\n            sensor_pt = to_point3d(_sensor_points_[i])\n            if room.geometry.is_point_inside(sensor_pt):\n                dl_control = DaylightingControl(\n                    sensor_pt, longest_list(_ill_setpoint_, i),\n                    longest_list(_control_fract_, i), longest_list(_min_power_in_, i),\n                    longest_list(_min_light_out_, i), longest_list(off_at_min_, i))\n                room.properties.energy.daylighting_control = dl_control\n            else:\n                unassigned_rooms.append(room.display_name)\n\n    # give a warning about any rooms to which a sensor could not be assinged\n    for room in unassigned_rooms:\n        msg = 'Sensor point for room \"{}\" does not lie within the room volume.\\n' \\\n            'No daylight sensors have been added to this room.'.format(room)\n        print(msg)\n        give_warning(ghenv.Component, msg)\n", 
  "category": "HB-Energy", 
  "name": "HB Apply Daylight Control", 
  "description": "Apply simple daylight controls to Rooms.\n_\nSuch simple controls will dim the lights in the energy simulation according to\nwhether the illuminance at a sensor location is at a target illuminance setpoint.\nThe method used to estimate illuiminance is fairly simple and, for more detailed\ncontrol over the parameters used to compute illuminance, the \"HB Daylight Control\nSchedule\" component under HB-Radiance should be used.\n-"
}
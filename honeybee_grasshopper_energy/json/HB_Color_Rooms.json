{
  "version": "1.0.0", 
  "nickname": "ColorRooms", 
  "outputs": [
    [
      {
        "access": "None", 
        "name": "readMe!", 
        "description": "...", 
        "type": null, 
        "default": null
      }, 
      {
        "access": "None", 
        "name": "mesh", 
        "description": "A colored mesh of the Room floor geometry colored using the input\n_data. Multiple meshes will be output for several data collections\nare input.", 
        "type": null, 
        "default": null
      }, 
      {
        "access": "None", 
        "name": "wire_frame", 
        "description": "A list of polylines representing the outline of the\nroom volumes.", 
        "type": null, 
        "default": null
      }, 
      {
        "access": "None", 
        "name": "legend", 
        "description": "Geometry representing the legend for the colored rooms.", 
        "type": null, 
        "default": null
      }, 
      {
        "access": "None", 
        "name": "title", 
        "description": "A text object for the global title.", 
        "type": null, 
        "default": null
      }, 
      {
        "access": "None", 
        "name": "rooms", 
        "description": "A list of honeybee Room objects that have been successfully matched\nto the input _data. This can be plugged into the \"HB Visualize\nQuick\" component to get full room volumes that are colored.", 
        "type": null, 
        "default": null
      }, 
      {
        "access": "None", 
        "name": "colors", 
        "description": "A list of color objects that align with the output rooms. These\ncan be connected to a native Grasshopper \"Custom Preview\" component\nin order to color room volumes with results.", 
        "type": null, 
        "default": null
      }, 
      {
        "access": "None", 
        "name": "values", 
        "description": "A list of numbers for each of the rooms, which are used to\ngenerate the colors.", 
        "type": null, 
        "default": null
      }
    ]
  ], 
  "inputs": [
    {
      "access": "list", 
      "name": "_data", 
      "description": "A list of HourlyContinuousCollections of the same data type, which\nwill be used to color Rooms. Data collections can be of any class\n(eg. MonthlyCollection, DailyCollection) but they should originate\nfrom an energy simulation sql (with header metadata that has 'Zone' or\n'System' keys). These keys will be used to match the data in the collections\nto the input rooms.", 
      "type": "System.Object", 
      "default": null
    }, 
    {
      "access": "list", 
      "name": "_rooms_model", 
      "description": "An array of honeybee Rooms or honeybee Models, which will\nbe matched to the data_collections. The length of these Rooms does\nnot have to match the data_collections and this object will only\ncreate visualizations for rooms that are found to be matching.", 
      "type": "System.Object", 
      "default": null
    }, 
    {
      "access": "item", 
      "name": "norm_by_flr_", 
      "description": "Boolean to note whether results should be normalized\nby the floor area of the Room if the data type of the data_colections\nsupports it. If False, values will be generated using sum total of\nthe data collection values. Note that this input has no effect if\nthe data type of the data_collections is not cumulative since data\ncollection values will always be averaged for this case. Default: True.", 
      "type": "bool", 
      "default": null
    }, 
    {
      "access": "item", 
      "name": "sim_step_", 
      "description": "An optional integer (greater than or equal to 0) to select\na specific step of the data collections for which result values will be\ngenerated. If None, the geometry will be colored with the total of\nresutls in the data_collections if the data type is cumulative or with\nthe average of results if the data type is not cumulative. Default: None.", 
      "type": "int", 
      "default": null
    }, 
    {
      "access": "item", 
      "name": "period_", 
      "description": "A Ladybug analysis period to be applied to all of the input _data.", 
      "type": "System.Object", 
      "default": null
    }, 
    {
      "access": "item", 
      "name": "legend_par_", 
      "description": "An optional LegendParameter object to change the display\nof the ColorRooms.", 
      "type": "System.Object", 
      "default": null
    }
  ], 
  "subcategory": "6 :: Result", 
  "code": "\n\ntry:\n    from honeybee.model import Model\nexcept ImportError as e:\n    raise ImportError('\\nFailed to import honeybee:\\n\\t{}'.format(e))\n\ntry:\n    from honeybee_energy.result.colorobj import ColorRoom\nexcept ImportError as e:\n    raise ImportError('\\nFailed to import honeybee_energy:\\n\\t{}'.format(e))\n\ntry:\n    from ladybug_{{cad}}.togeometry import to_point3d\n    from ladybug_{{cad}}.fromgeometry import from_face3ds_to_colored_mesh, \\\n        from_polyface3d_to_wireframe\n    from ladybug_{{cad}}.text import text_objects\n    from ladybug_{{cad}}.fromobjects import legend_objects\n    from ladybug_{{cad}}.color import color_to_color\n    from ladybug_{{cad}}.{{plugin}} import all_required_inputs\n    from ladybug_{{cad}}.config import units_abbreviation\nexcept ImportError as e:\n    raise ImportError('\\nFailed to import ladybug_{{cad}}:\\n\\t{}'.format(e))\n\n\nif all_required_inputs(ghenv.Component):\n    # extract any rooms from input Models\n    rooms = []\n    for hb_obj in _rooms_model:\n        if isinstance(hb_obj, Model):\n            rooms.extend(hb_obj.rooms)\n        else:\n            rooms.append(hb_obj)\n\n    # apply analysis period to the data if connected\n    if period_ is not None:\n        _data = [coll.filter_by_analysis_period(period_) for coll in _data]\n\n    # set default norm_by_floor value\n    norm_by_flr_ = True if norm_by_flr_ is None else norm_by_flr_\n\n    # create the ColorRoom visualization object and output geometry\n    color_obj = ColorRoom(_data, rooms, legend_par_, sim_step_, norm_by_flr_,\n                          units_abbreviation())\n    graphic = color_obj.graphic_container\n    mesh = [from_face3ds_to_colored_mesh(flrs, col) for flrs, col in\n            zip(color_obj.matched_floor_faces, graphic.value_colors)]\n    wire_frame = []\n    for room in rooms:\n        wire_frame.extend(from_polyface3d_to_wireframe(room.geometry))\n    legend = legend_objects(graphic.legend)\n    title = text_objects(color_obj.title_text, graphic.lower_title_location,\n                         graphic.legend_parameters.text_height,\n                         graphic.legend_parameters.font)\n    rooms = color_obj.matched_rooms\n    colors = [color_to_color(col, 125) for col in graphic.value_colors]\n    values = graphic.values\n", 
  "category": "HB-Energy", 
  "name": "HB Color Rooms", 
  "description": "Visualize Room-level energy simulation results as colored Room geometry.\n-"
}